EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
des.exe -- emu8086 assembler version: 4.07  
 
[ 18/06/2017  --  18:29:38 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ; multi-segment executable file template.
[   2]        :                                       
[   3]        :                                       data segment
[   4]        :                                       ;the message after converted to hexa
[   5]    0000: 00 00 00 00 00 00 00 00               m db 8 dup(0)
[   6]        :                                       ;encryption key that was choosed by the user
[   7]    0008: 00 00 00 00 00 00 00 00               ekey db 8 dup(0)
[   8]        :                                       ;pc-1 means - bit arrangment to create the permuted key - k+
[   9]    0010: 39 31 29 21 19 11 09                  pc_1 db 57,49,41,33,25,17,09
[  10]    0017: 01 3A 32 2A 22 1A 12                  db 01,58,50,42,34,26,18
[  11]    001E: 0A 02 3B 33 2B 23 1B                  db 10,02,59,51,43,35,27
[  12]    0025: 13 0B 03 3C 34 2C 24                  db 19,11,03,60,52,44,36
[  13]    002C: 3F 37 2F 27 1F 17 0F                  db 63,55,47,39,31,23,15
[  14]    0033: 07 3E 36 2E 26 1E 16                  db 07,62,54,46,38,30,22
[  15]    003A: 0E 06 3D 35 2D 25 1D                  db 14,06,61,53,45,37,29
[  16]    0041: 15 0D 05 1C 14 0C 04                  db 21,13,05,28,20,12,04
[  17]        :                                       
[  18]    0048: 0E 11 0B 18 01 05                     pc_2 db 14,17,11,24,01,05
[  19]    004E: 03 1C 0F 06 15 0A                     db 03,28,15,06,21,10
[  20]    0054: 17 13 0C 04 1A 08                     db 23,19,12,04,26,08
[  21]    005A: 10 07 1B 14 0D 02                     db 16,07,27,20,13,02
[  22]    0060: 29 34 1F 25 2F 37                     db 41,52,31,37,47,55
[  23]    0066: 1E 28 33 2D 21 30                     db 30,40,51,45,33,48
[  24]    006C: 2C 31 27 38 22 35                     db 44,49,39,56,34,53
[  25]    0072: 2E 2A 32 24 1D 20                     db 46,42,50,36,29,32
[  26]        :                                       
[  27]    0078: 3A 32 2A 22 1A 12 0A 02               ip_tbl db 58,50,42,34,26,18,10,02
[  28]    0080: 3C 34 2C 24 1C 14 0C 04               db 60,52,44,36,28,20,12,04
[  29]    0088: 3E 36 2E 26 1E 16 0E 06               db 62,54,46,38,30,22,14,06
[  30]    0090: 40 38 30 28 20 18 10 08               db 64,56,48,40,32,24,16,08
[  31]    0098: 39 31 29 21 19 11 09 01               db 57,49,41,33,25,17,09,01
[  32]    00A0: 3B 33 2B 23 1B 13 0B 03               db 59,51,43,35,27,19,11,03
[  33]    00A8: 3D 35 2D 25 1D 15 0D 05               db 61,53,45,37,29,21,13,05
[  34]    00B0: 3F 37 2F 27 1F 17 0F 07               db 63,55,47,39,31,23,15,07
[  35]        :                                       
[  36]    00B8: 20 01 02 03 04 05                     e_tbl db 32,01,02,03,04,05
[  37]    00BE: 04 05 06 07 08 09                     db 04,05,06,07,08,09
[  38]    00C4: 08 09 0A 0B 0C 0D                     db 08,09,10,11,12,13
[  39]    00CA: 0C 0D 0E 0F 10 11                     db 12,13,14,15,16,17
[  40]    00D0: 10 11 12 13 14 15                     db 16,17,18,19,20,21
[  41]    00D6: 14 15 16 17 18 19                     db 20,21,22,23,24,25
[  42]    00DC: 18 19 1A 1B 1C 1D                     db 24,25,26,27,28,29
[  43]    00E2: 1C 1D 1E 1F 20 01                     db 28,29,30,31,32,01
[  44]        :                                       
[  45]        :                                       
[  46]        :                                       
[  47]    00E8: 0E 04 0D 01 02 0F 0B 08 03 0A 06 0C   s1 db 14,04,13,01,02,15,11,08,03,10,06,12,05,09,00,07
                05 09 00 07                         
[  48]    00F8: 00 0F 07 04 0E 02 0D 01 0A 06 0C 0B   db 00,15,07,04,14,02,13,01,10,06,12,11,09,05,03,08
                09 05 03 08                         
[  49]    0108: 04 01 0E 08 0D 06 02 0B 0F 0C 09 07   db 04,01,14,08,13,06,02,11,15,12,09,07,03,10,05,00
                03 0A 05 00                         
[  50]    0118: 0F 0C 08 02 04 09 01 07 05 0B 03 0E   db 15,12,08,02,04,09,01,07,05,11,03,14,10,00,06,13
                0A 00 06 0D                         
[  51]        :                                       
[  52]        :                                       
[  53]    0128: 0F 01 08 0E 06 0B 03 04 09 07 02 0D   s2 db 15,01,08,14,06,11,03,04,09,07,02,13,12,00,05,10
                0C 00 05 0A                         
[  54]    0138: 03 0D 04 07 0F 02 08 0E 0C 00 01 0A   db 03,13,04,07,15,02,08,14,12,00,01,10,06,09,11,05
                06 09 0B 05                         
[  55]    0148: 00 0E 07 0B 0A 04 0D 01 05 08 0C 06   db 00,14,07,11,10,04,13,01,05,08,12,06,09,03,02,15
                09 03 02 0F                         
[  56]    0158: 0D 08 0A 01 03 0F 04 02 0B 06 07 0C   db 13,08,10,01,03,15,04,02,11,06,07,12,00,05,14,09
                00 05 0E 09                         
[  57]        :                                       
[  58]        :                                       
[  59]    0168: 0A 00 09 0E 06 03 0F 05 01 0D 0C 07   s3 db 10,00,09,14,06,03,15,05,01,13,12,07,11,04,02,08
                0B 04 02 08                         
[  60]    0178: 0D 07 00 09 03 04 06 0A 02 08 05 0E   db 13,07,00,09,03,04,06,10,02,08,05,14,12,11,15,01
                0C 0B 0F 01                         
[  61]    0188: 0D 06 04 09 08 0F 03 00 0B 01 02 0C   db 13,06,04,09,08,15,03,00,11,01,02,12,05,10,14,07
                05 0A 0E 07                         
[  62]    0198: 01 0A 0D 00 06 09 08 07 04 0F 0E 03   db 01,10,13,00,06,09,08,07,04,15,14,03,11,05,02,12
                0B 05 02 0C                         
[  63]        :                                       
[  64]        :                                       
[  65]    01A8: 07 0D 0E 03 00 06 09 0A 01 02 08 05   s4 db 07,13,14,03,00,06,09,10,01,02,08,05,11,12,04,15
                0B 0C 04 0F                         
[  66]    01B8: 0D 08 0B 05 06 0F 00 03 04 07 02 0C   db 13,08,11,05,06,15,00,03,04,07,02,12,01,10,14,09
                01 0A 0E 09                         
[  67]    01C8: 0A 06 09 00 0C 0B 07 0D 0F 01 03 0E   db 10,06,09,00,12,11,07,13,15,01,03,14,05,02,08,04
                05 02 08 04                         
[  68]    01D8: 03 0F 00 06 0A 01 0D 08 09 04 05 0B   db 03,15,00,06,10,01,13,08,09,04,05,11,12,07,02,14
                0C 07 02 0E                         
[  69]        :                                       
[  70]        :                                       
[  71]    01E8: 02 0C 04 01 07 0A 0B 06 08 05 03 0F   s5 db 02,12,04,01,07,10,11,06,08,05,03,15,13,00,14,09
                0D 00 0E 09                         
[  72]    01F8: 0E 0B 02 0C 04 07 0D 01 05 00 0F 0A   db 14,11,02,12,04,07,13,01,05,00,15,10,03,09,08,06
                03 09 08 06                         
[  73]    0208: 04 02 01 0B 0A 0D 07 08 0F 09 0C 05   db 04,02,01,11,10,13,07,08,15,09,12,05,06,03,00,14
                06 03 00 0E                         
[  74]    0218: 0B 08 0C 07 01 0E 02 0D 06 0F 00 09   db 11,08,12,07,01,14,02,13,06,15,00,09,10,04,05,03
                0A 04 05 03                         
[  75]        :                                       
[  76]        :                                       
[  77]    0228: 0C 01 0A 0F 09 02 06 08 00 0D 03 04   s6 db 12,01,10,15,09,02,06,08,00,13,03,04,14,07,05,11
                0E 07 05 0B                         
[  78]    0238: 0A 0F 04 02 07 0C 09 05 06 01 0D 0E   db 10,15,04,02,07,12,09,05,06,01,13,14,00,11,03,08
                00 0B 03 08                         
[  79]    0248: 09 0E 0F 05 02 08 0C 03 07 00 04 0A   db 09,14,15,05,02,08,12,03,07,00,04,10,01,13,11,06
                01 0D 0B 06                         
[  80]    0258: 04 03 02 0C 09 05 0F 0A 0B 0E 01 07   db 04,03,02,12,09,05,15,10,11,14,01,07,06,00,08,13
                06 00 08 0D                         
[  81]        :                                       
[  82]        :                                       
[  83]    0268: 04 0B 02 0E 0F 00 08 0D 03 0C 09 07   s7 db 04,11,02,14,15,00,08,13,03,12,09,07,05,10,06,01
                05 0A 06 01                         
[  84]    0278: 0D 00 0B 07 04 09 01 0A 0E 03 05 0C   db 13,00,11,07,04,09,01,10,14,03,05,12,02,15,08,06
                02 0F 08 06                         
[  85]    0288: 01 04 0B 0D 0C 03 07 0E 0A 0F 06 08   db 01,04,11,13,12,03,07,14,10,15,06,08,00,05,09,02
                00 05 09 02                         
[  86]    0298: 06 0B 0D 08 01 04 0A 07 09 05 00 0F   db 06,11,13,08,01,04,10,07,09,05,00,15,14,02,03,12
                0E 02 03 0C                         
[  87]        :                                       
[  88]        :                                       
[  89]    02A8: 0D 02 08 04 06 0F 0B 01 0A 09 03 0E   s8 db 13,02,08,04,06,15,11,01,10,09,03,14,05,00,12,07
                05 00 0C 07                         
[  90]    02B8: 01 0F 0D 08 0A 03 07 04 0C 05 06 0B   db 01,15,13,08,10,03,07,04,12,05,06,11,00,14,09,02
                00 0E 09 02                         
[  91]    02C8: 07 0B 04 01 09 0C 0E 02 00 06 0A 0D   db 07,11,04,01,09,12,14,02,00,06,10,13,15,03,05,08
                0F 03 05 08                         
[  92]    02D8: 02 01 0E 07 04 0A 08 0D 0F 0C 09 00   db 02,01,14,07,04,10,08,13,15,12,09,00,03,05,06,11
                03 05 06 0B                         
[  93]        :                                       
[  94]    02E8: 10 07 14 15                           p db 16,07,20,21
[  95]    02EC: 1D 0C 1C 11                           db 29,12,28,17
[  96]    02F0: 01 0F 17 1A                           db 01,15,23,26
[  97]    02F4: 05 12 1F 0A                           db 05,18,31,10
[  98]    02F8: 02 08 18 0E                           db 02,08,24,14
[  99]    02FC: 20 1B 03 09                           db 32,27,03,09
[ 100]    0300: 13 0D 1E 06                           db 19,13,30,06
[ 101]    0304: 16 0B 04 19                           db 22,11,04,25
[ 102]        :                                       
[ 103]        :                                       
[ 104]    0308: 28 08 30 10 38 18 40 20               pc_minus db 40,08,48,16,56,24,64,32
[ 105]    0310: 27 07 2F 0F 37 17 3F 1F               db 39,07,47,15,55,23,63,31
[ 106]    0318: 26 06 2E 0E 36 16 3E 1E               db 38,06,46,14,54,22,62,30
[ 107]    0320: 25 05 2D 0D 35 15 3D 1D               db 37,05,45,13,53,21,61,29
[ 108]    0328: 24 04 2C 0C 34 14 3C 1C               db 36,04,44,12,52,20,60,28
[ 109]    0330: 23 03 2B 0B 33 13 3B 1B               db 35,03,43,11,51,19,59,27
[ 110]    0338: 22 02 2A 0A 32 12 3A 1A               db 34,02,42,10,50,18,58,26
[ 111]    0340: 21 01 29 09 31 11 39 19               db 33,01,41,09,49,17,57,25
[ 112]        :                                       
[ 113]        :                                       
[ 114]    0348: 00 00 00 00 00 00 00                  k_plus db 7 dup(00)
[ 115]    034F: 00                                    selected_byte db ?
[ 116]    0350: 00                                    selected_bit db  ?
[ 117]    0351: 00                                    temp_byte db 00000000b
[ 118]    0352: 00                                    byte_builder_pointer db 0
[ 119]    0353: 00 00                                 pointer dw 0000h
[ 120]    0355: 00 00 00 00                           k_plus_l dd 0h
[ 121]    0359: 00 00 00 00                           k_plus_r dd 0h
[ 122]    035D: 01 01 02 02 02 02 02 02 01 02 02 02   shifts db 01,01,02,02,02,02,02,02,01,02,02,02,02,02,02,01
                02 02 02 01                         
[ 123]    036D: 00 00 00 00 00 00 00 00 00 00 00 00   c dd 0h,0h,0h,0h,0h,0h,0h,0h,0h,0h,0h,0h,0h,0h,0h,0h
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[ 124]    03AD: 00 00 00 00 00 00 00 00 00 00 00 00   d dd 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[ 125]    03ED: 00 00 00 00 00 00 00 00 00 00 00 00   cd db 112 dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[ 126]    045D: 00 00 00 00                           temp_dword dd 00000000h
[ 127]    0461: 00 00 00 00 00 00 00 00 00 00 00 00   k db 96 dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                                                    
[ 128]    04C1: 00                                    para db 00h ;multipurpose parameter
[ 129]    04C2: 00 00 00 00 00 00 00 00               ip db 8 dup(0)
[ 130]    04CA: 00 00 00 00                           l_0 db 4 dup(0)
[ 131]    04CE: 00 00 00 00                           r_0 db 4 dup(0)
[ 132]    04D2: 00 00 00 00 00 00 00 00 00 00 00 00   l db 64 dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[ 133]    0512: 00 00 00 00 00 00 00 00 00 00 00 00   r db 64 dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[ 134]    0552: 00 00 00 00 00 00                     e db 6 dup(0)
[ 135]    0558: 00                                    l_index db 0
[ 136]    0559: 00                                    r_index db 0
[ 137]    055A: 00 00 00 00 00 00 00 00               b db 8 dup(0)
[ 138]    0562: 00                                    s_row db 0
[ 139]    0563: 00                                    s_column db 0
[ 140]    0564: 00 00 00 00                           s db 4 dup(0)
[ 141]    0568: 00 00 00 00                           f db 4 dup(0)
[ 142]    056C: 00 00                                 temp_offset1 dw 0000h
[ 143]    056E: 00 00                                 temp_offset2 dw 0000h
[ 144]    0570: 00 00 00 00                           temp_arr db 4 dup(0)
[ 145]    0574: 00 00 00 00                           lp db 4 dup(0)
[ 146]    0578: 00 00 00 00 00 00 00 00               rl db 8 dup(0)
[ 147]    0580: 00 00 00 00                           rp db 4 dup(0)
[ 148]    0584: 00 00 00 00 00 00 00 00               dec_msg db 8 dup(0)
[ 149]    058C: 00 00 00 00 00 00 00 00               enc_msg db 8 dup(0)
[ 150]    0594: 00 00 00 00 00 00 00 00 00 00 00 00   m_ascii db 19 dup(0)
                00 00 00 00 00 00 00                
[ 151]    05A7: 00 00 00 00 00 00 00 00 00 00 00 00   ekey_ascii db 19 dup(0)
                00 00 00 00 00 00 00                
[ 152]    05BA: 00 00 00 00 00 00 00 00 00 00 00 00   enc_msg_ascii 16 dup(0),"$"
                00 00 00 00 24                      
[ 153]    05CB: 00 00 00 00 00 00 00 00 00 00 00 00   dec_msg_ascii db 16 dup(0),"$"
                00 00 00 00 24                      
[ 154]    05DC: 59 6F 75 20 74 79 70 65 64 20 69 6E   error_msg db "You typed in some invaild input, check help for list of command.",10,"Prees any key to start over...","$"
                20 73 6F 6D 65 20 69 6E 76 61 69 6C 
                64 20 69 6E 70 75 74 2C 20 63 68 65 
                63 6B 20 68 65 6C 70 20 66 6F 72 20 
                6C 69 73 74 20 6F 66 20 63 6F 6D 6D 
                61 6E 64 2E 0A 50 72 65 65 73 20 61 
                6E 79 20 6B 65 79 20 74 6F 20 73 74 
                61 72 74 20 6F 76 65 72 2E 2E 2E 24 
                                                    
[ 155]    063C: 50 6C 65 61 73 65 20 65 6E 74 65 72   ask_msg db "Please enter the 16 charecters length hexa message:","$"
                20 74 68 65 20 31 36 20 63 68 61 72 
                65 63 74 65 72 73 20 6C 65 6E 67 74 
                68 20 68 65 78 61 20 6D 65 73 73 61 
                67 65 3A 24                         
[ 156]    0670: 50 6C 65 61 73 65 20 65 6E 74 65 72   ask_enc db "Please enter the 16 charecters length hexa encrypted message:","$"
                20 74 68 65 20 31 36 20 63 68 61 72 
                65 63 74 65 72 73 20 6C 65 6E 67 74 
                68 20 68 65 78 61 20 65 6E 63 72 79 
                70 74 65 64 20 6D 65 73 73 61 67 65 
                3A 24                               
[ 157]    06AE: 50 6C 65 61 73 65 20 65 6E 74 65 72   ask_key db "Please enter the 16 charecters length hexa encryption key:","$"
                20 74 68 65 20 31 36 20 63 68 61 72 
                65 63 74 65 72 73 20 6C 65 6E 67 74 
                68 20 68 65 78 61 20 65 6E 63 72 79 
                70 74 69 6F 6E 20 6B 65 79 3A 24    
[ 158]    06E9: 50 6C 65 61 73 65 20 65 6E 74 65 72   ask_dec_key db "Please enter the 16 charecters length hexa decryption key:","$"
                20 74 68 65 20 31 36 20 63 68 61 72 
                65 63 74 65 72 73 20 6C 65 6E 67 74 
                68 20 68 65 78 61 20 64 65 63 72 79 
                70 74 69 6F 6E 20 6B 65 79 3A 24    
[ 159]    0724: 54 68 69 73 20 69 73 20 74 68 65 20   show_enc db "This is the encrypted message:","$"
                65 6E 63 72 79 70 74 65 64 20 6D 65 
                73 73 61 67 65 3A 24                
[ 160]    0743: 54 68 69 73 20 69 73 20 74 68 65 20   show_dec db "This is the encrypted message:","$"
                65 6E 63 72 79 70 74 65 64 20 6D 65 
                73 73 61 67 65 3A 24                
[ 161]    0762: 45 6E 74 65 72 20 63 6F 6D 6D 61 6E   ask_command db "Enter command:","$"
                64 3A 24                            
[ 162]    0771: 4C 69 73 74 20 6F 66 20 63 6F 6D 6D   help_msg db "List of commands:",10,"e -  encrypt message using DES algorithm.",10,"d - decrypt message using DES algorithm.",10,10,"*notice - all encrytion/decryption input has to be 16 charecters length",10," hexadecimal number",10,"without extra zero in the start,or h at the end","$"
                61 6E 64 73 3A 0A 65 20 2D 20 20 65 
                6E 63 72 79 70 74 20 6D 65 73 73 61 
                67 65 20 75 73 69 6E 67 20 44 45 53 
                20 61 6C 67 6F 72 69 74 68 6D 2E 0A 
                64 20 2D 20 64 65 63 72 79 70 74 20 
                6D 65 73 73 61 67 65 20 75 73 69 6E 
                67 20 44 45 53 20 61 6C 67 6F 72 69 
                74 68 6D 2E 0A 0A 2A 6E 6F 74 69 63 
                65 20 2D 20 61 6C 6C 20 65 6E 63 72 
                79 74 69 6F 6E 2F 64 65 63 72 79 70 
                74 69 6F 6E 20 69 6E 70 75 74 20 68 
                61 73 20 74 6F 20 62 65 20 31 36 20 
                63 68 61 72 65 63 74 65 72 73 20 6C 
                65 6E 67 74 68 0A 20 68 65 78 61 64 
                65 63 69 6D 61 6C 20 6E 75 6D 62 65 
                72 0A 77 69 74 68 6F 75 74 20 65 78 
                74 72 61 20 7A 65 72 6F 20 69 6E 20 
                74 68 65 20 73 74 61 72 74 2C 6F 72 
                20 68 20 61 74 20 74 68 65 20 65 6E 
                64 24                               
[ 163]    0863: 48 65 6C 6C 6F 2C 20 77 65 6C 63 6F   welcome_msg db "Hello, welcome to DES encryptor/decryptor.","$"
                6D 65 20 74 6F 20 44 45 53 20 65 6E 
                63 72 79 70 74 6F 72 2F 64 65 63 72 
                79 70 74 6F 72 2E 24                
[ 164]    088E: 00 00 00 00                           command db 4 dup(0)
[ 165]    0892: 50 72 65 73 73 20 61 6E 79 20 6B 65   wait_key db "Press any key to continue...","$"
                79 20 74 6F 20 63 6F 6E 74 69 6E 75 
                65 2E 2E 2E 24                      
[ 166]    08AF: 68 65 6C 70                           help db "help"
[ 167]    08B3: 48 45 4C 50                           chelp db "HELP"
[ 168]    08B7: 65 6E 63                              enc db "enc"
[ 169]    08BA: 45 4E 43                              cenc db "ENC"
[ 170]    08BD: 64 65 63                              decr db "dec"
[ 171]    08C0: 44 45 43                              cdecr db "DEC"
[ 172]    08C3: 65 78 69 74                           exit db  "exit"
[ 173]    08C7: 45 58 49 54                           cexit db "EXIT"
[ 174]        :                                       
[ 175]        :                                       
[ 176]        :                                       
[ 177]        :                                       
[ 178]        :                                       
[ 179]        :                                       ends
[ 180]        :                                       
[ 181]        :                                       stack segment
[ 182]    08D0: 00 00 00 00 00 00 00 00 00 00 00 00   dw   128  dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[ 183]        :                                       ends
[ 184]        :                                       
[ 185]        :                                       code segment
[ 186]        :                                       
[ 187]        :                                       ;INPUT OUTPUT
[ 188]        :                                       ;gets input
[ 189]        :                                       ;get:dest,length
[ 190]        :                                       ;return:string
[ 191]        :                                       macro get_input dest,len
[ 192]        :                                       pusha
[ 193]        :                                       mov dx,offset dest
[ 194]        :                                       mov bx,dx
[ 195]        :                                       mov cl,len
[ 196]        :                                       inc cl
[ 197]        :                                       mov [bx],cl
[ 198]        :                                       mov ah,0ah
[ 199]        :                                       int 21h
[ 200]        :                                       popa
[ 201]        :                                       endm get_input
[ 202]        :                                       ;converts string to hexa
[ 203]        :                                       ;get:source,dest
[ 204]        :                                       ;return: hexa in dest
[ 205]        :                                       macro str2hex source,dest
[ 206]        :                                       pusha
[ 207]        :                                       LOCAL agn_bld_char,goback,error,check_hex,skp_hex,check_cap,skp_1st_char,end_str
[ 208]        :                                       xor di,di
[ 209]        :                                       xor si,si
[ 210]        :                                       mov si,2
[ 211]        :                                       xor cx,cx
[ 212]        :                                       mov cx,8
[ 213]        :                                       agn_bld_char:
[ 214]        :                                       mov pointer,0
[ 215]        :                                       xor ax,ax
[ 216]        :                                       xor dx,dx
[ 217]        :                                       xor bx,bx
[ 218]        :                                       goback:
[ 219]        :                                       mov al,source+si
[ 220]        :                                       
[ 221]        :                                       ;check
[ 222]        :                                       cmp al,30h
[ 223]        :                                       js error
[ 224]        :                                       mov bl,39h
[ 225]        :                                       cmp bl,al
[ 226]        :                                       js check_hex
[ 227]        :                                       sub al,30h
[ 228]        :                                       jmp skp_hex
[ 229]        :                                       
[ 230]        :                                       check_hex:
[ 231]        :                                       cmp al,41h
[ 232]        :                                       js error
[ 233]        :                                       mov bl,46h
[ 234]        :                                       cmp bl,al
[ 235]        :                                       js check_cap
[ 236]        :                                       sub al,55
[ 237]        :                                       jmp skp_hex
[ 238]        :                                       
[ 239]        :                                       check_cap:
[ 240]        :                                       cmp al,61h
[ 241]        :                                       js error
[ 242]        :                                       mov bl,66h
[ 243]        :                                       cmp bl,al
[ 244]        :                                       js error
[ 245]        :                                       sub al,87
[ 246]        :                                       
[ 247]        :                                       skp_hex:
[ 248]        :                                       
[ 249]        :                                       cmp pointer,0
[ 250]        :                                       jnz skp_1st_char
[ 251]        :                                       inc si
[ 252]        :                                       inc pointer
[ 253]        :                                       mov dh,al
[ 254]        :                                       jmp goback
[ 255]        :                                       skp_1st_char:
[ 256]        :                                       mov bl,10h
[ 257]        :                                       mov dl,al
[ 258]        :                                       mov al,dh
[ 259]        :                                       mul bl
[ 260]        :                                       mov dh,al
[ 261]        :                                       or dh,dl
[ 262]        :                                       mov dest+di,dh
[ 263]        :                                       inc si
[ 264]        :                                       inc di
[ 265]        :                                       loop agn_bld_char
[ 266]        :                                       
[ 267]        :                                       jmp end_str
[ 268]        :                                       error:
[ 269]        :                                       ;reset screen
[ 270]        :                                       call cln_scr
[ 271]        :                                       set_cur 0,0
[ 272]        :                                       print_msg error_msg
[ 273]        :                                       ; wait for any key....
[ 274]        :                                       mov ah, 1
[ 275]        :                                       int 21h
[ 276]        :                                       jmp ask_again
[ 277]        :                                       
[ 278]        :                                       end_str:
[ 279]        :                                       popa
[ 280]        :                                       endm str2hex
[ 281]        :                                       ;prints message
[ 282]        :                                       ;get:msg
[ 283]        :                                       macro print_msg pmsg
[ 284]        :                                       pusha
[ 285]        :                                       mov ah,09h
[ 286]        :                                       mov dx,offset pmsg
[ 287]        :                                       int 21h
[ 288]        :                                       
[ 289]        :                                       
[ 290]        :                                       popa
[ 291]        :                                       endm print_msg
[ 292]        :                                       ;cleans screen
[ 293]    09D0:                                       proc cln_scr
[ 294]    09D0: 60                                    pusha
[ 295]        :                                       ;clean screen
[ 296]    09D1: B4 06                                 mov ah,6
[ 297]    09D3: B0 00                                 mov al,0
[ 298]    09D5: B7 0F                                 mov bh,0_0fh
[ 299]    09D7: 33 C9                                 xor cx,cx
[ 300]    09D9: B6 C8                                 mov dh,200
[ 301]    09DB: B2 C8                                 mov dl,200
[ 302]    09DD: CD 10                                 int 10h
[ 303]        :                                       
[ 304]    09DF: 61                                    popa
[ 305]    09E0: C3                                    ret
[ 306]        :                                       endp cln_scr
[ 307]        :                                       ;sets cursor position
[ 308]        :                                       ;get:x,y
[ 309]        :                                       macro set_cur x,y
[ 310]        :                                       ;set cursor
[ 311]        :                                       pusha
[ 312]        :                                       mov ah,2
[ 313]        :                                       mov bh,0
[ 314]        :                                       xor dx,dx
[ 315]        :                                       int 10h
[ 316]        :                                       popa
[ 317]        :                                       endm set_cur x,y
[ 318]        :                                       ;gets message and key
[ 319]    09E1:                                       proc get_msgnkey
[ 320]    09E1: 60                                    pusha
[ 321]        :                                       ;reset screen
[ 322]    09E2: E8 EB FF                              call cln_scr
[ 323]    09E5: 60 B4 02 B7 00 33 D2 CD 10 61         set_cur 0,0
[ 324]    09EF: 60 B4 09 BA 3C 06 CD 21 61            print_msg ask_msg
[ 325]    09F8: 60 BA 94 05 8B DA B1 10 FE C1 88 0F   get_input m_ascii,16
                B4 0A CD 21 61                      
[ 326]    0A09: 60 33 FF 33 F6 BE 02 00 33 C9 B9 08   str2hex m_ascii,m
                00 C7 06 53 03 00 00 33 C0 33 D2 33 
                DB 8A 84 94 05 3C 30 78 48 B3 39 3A 
                D8 78 04 2C 30 EB 1A 3C 41 78 3A B3 
                46 3A D8 78 04 2C 37 EB 0C 3C 61 78 
                2C B3 66 3A D8 78 26 2C 57 83 3E 53 
                03 00 75 09 46 FF 06 53 03 8A F0 EB 
                C4 B3 10 8A D0 8A C6 F6 E3 8A F0 0A 
                F2 88 35 46 47 E2 A6 EB 1D E8 5B FF 
                60 B4 02 B7 00 33 D2 CD 10 61 60 B4 
                09 BA DC 05 CD 21 61 B4 01 CD 21 E9 
                CF 15 61                            
[ 327]        :                                       ;reset screen
[ 328]    0A90: E8 3D FF                              call cln_scr
[ 329]    0A93: 60 B4 02 B7 00 33 D2 CD 10 61         set_cur 0,0
[ 330]    0A9D: 60 B4 09 BA AE 06 CD 21 61            print_msg ask_key
[ 331]    0AA6: 60 BA A7 05 8B DA B1 10 FE C1 88 0F   get_input ekey_ascii,16
                B4 0A CD 21 61                      
[ 332]    0AB7: 60 33 FF 33 F6 BE 02 00 33 C9 B9 08   str2hex ekey_ascii,ekey
                00 C7 06 53 03 00 00 33 C0 33 D2 33 
                DB 8A 84 A7 05 3C 30 78 49 B3 39 3A 
                D8 78 04 2C 30 EB 1A 3C 41 78 3B B3 
                46 3A D8 78 04 2C 37 EB 0C 3C 61 78 
                2D B3 66 3A D8 78 27 2C 57 83 3E 53 
                03 00 75 09 46 FF 06 53 03 8A F0 EB 
                C4 B3 10 8A D0 8A C6 F6 E3 8A F0 0A 
                F2 88 75 08 46 47 E2 A5 EB 1D E8 AC 
                FE 60 B4 02 B7 00 33 D2 CD 10 61 60 
                B4 09 BA DC 05 CD 21 61 B4 01 CD 21 
                E9 20 15 61                         
[ 333]    0B3F: 61                                    popa
[ 334]    0B40: C3                                    ret
[ 335]        :                                       endp get_msgnkey
[ 336]        :                                       ;gets encrypted message and key.
[ 337]    0B41:                                       proc get_encnkey
[ 338]    0B41: 60                                    pusha
[ 339]        :                                       ;reset screen
[ 340]    0B42: E8 8B FE                              call cln_scr
[ 341]    0B45: 60 B4 02 B7 00 33 D2 CD 10 61         set_cur 0,0
[ 342]    0B4F: 60 B4 09 BA 70 06 CD 21 61            print_msg ask_enc
[ 343]    0B58: 60 BA BA 05 8B DA B1 10 FE C1 88 0F   get_input enc_msg_ascii,16
                B4 0A CD 21 61                      
[ 344]    0B69: 60 33 FF 33 F6 BE 02 00 33 C9 B9 08   str2hex enc_msg_ascii,enc_msg
                00 C7 06 53 03 00 00 33 C0 33 D2 33 
                DB 8A 84 BA 05 3C 30 78 4A B3 39 3A 
                D8 78 04 2C 30 EB 1A 3C 41 78 3C B3 
                46 3A D8 78 04 2C 37 EB 0C 3C 61 78 
                2E B3 66 3A D8 78 28 2C 57 83 3E 53 
                03 00 75 09 46 FF 06 53 03 8A F0 EB 
                C4 B3 10 8A D0 8A C6 F6 E3 8A F0 0A 
                F2 88 B5 8C 05 46 47 E2 A4 EB 1D E8 
                F9 FD 60 B4 02 B7 00 33 D2 CD 10 61 
                60 B4 09 BA DC 05 CD 21 61 B4 01 CD 
                21 E9 6D 14 61                      
[ 345]        :                                       ;reset screen
[ 346]    0BF2: E8 DB FD                              call cln_scr
[ 347]    0BF5: 60 B4 02 B7 00 33 D2 CD 10 61         set_cur 0,0
[ 348]    0BFF: 60 B4 09 BA E9 06 CD 21 61            print_msg ask_dec_key
[ 349]    0C08: 60 BA A7 05 8B DA B1 10 FE C1 88 0F   get_input ekey_ascii,16
                B4 0A CD 21 61                      
[ 350]    0C19: 60 33 FF 33 F6 BE 02 00 33 C9 B9 08   str2hex ekey_ascii,ekey
                00 C7 06 53 03 00 00 33 C0 33 D2 33 
                DB 8A 84 A7 05 3C 30 78 49 B3 39 3A 
                D8 78 04 2C 30 EB 1A 3C 41 78 3B B3 
                46 3A D8 78 04 2C 37 EB 0C 3C 61 78 
                2D B3 66 3A D8 78 27 2C 57 83 3E 53 
                03 00 75 09 46 FF 06 53 03 8A F0 EB 
                C4 B3 10 8A D0 8A C6 F6 E3 8A F0 0A 
                F2 88 75 08 46 47 E2 A5 EB 1D E8 4A 
                FD 60 B4 02 B7 00 33 D2 CD 10 61 60 
                B4 09 BA DC 05 CD 21 61 B4 01 CD 21 
                E9 BE 13 61                         
[ 351]    0CA1: 61                                    popa
[ 352]    0CA2: C3                                    ret
[ 353]        :                                       endp get_encnkey
[ 354]        :                                       ;converts hexa to string
[ 355]        :                                       ;get:source,dest
[ 356]        :                                       ;return: string in dest
[ 357]        :                                       macro hex2str source,dest
[ 358]        :                                       pusha
[ 359]        :                                       LOCAL again,cont,cont1,skp_hex,skp_hex1
[ 360]        :                                       xor si,si
[ 361]        :                                       xor ax,ax
[ 362]        :                                       xor cx,cx
[ 363]        :                                       xor di,di
[ 364]        :                                       mov cx,8
[ 365]        :                                       again:
[ 366]        :                                       mov al,source+si
[ 367]        :                                       and al,11110000b
[ 368]        :                                       shr al,4
[ 369]        :                                       
[ 370]        :                                       
[ 371]        :                                       cmp al,0ah
[ 372]        :                                       js skp_hex
[ 373]        :                                       add al,55
[ 374]        :                                       mov dest+di,al
[ 375]        :                                       inc di
[ 376]        :                                       jmp cont
[ 377]        :                                       
[ 378]        :                                       skp_hex:
[ 379]        :                                       add al,30h
[ 380]        :                                       mov dest+di,al
[ 381]        :                                       inc di
[ 382]        :                                       
[ 383]        :                                       
[ 384]        :                                       cont:
[ 385]        :                                       mov al,source+si
[ 386]        :                                       and al,00001111b
[ 387]        :                                       
[ 388]        :                                       cmp al,0ah
[ 389]        :                                       js skp_hex1
[ 390]        :                                       add al,55
[ 391]        :                                       mov dest+di,al
[ 392]        :                                       inc di
[ 393]        :                                       jmp cont1
[ 394]        :                                       
[ 395]        :                                       skp_hex1:
[ 396]        :                                       add al,30h
[ 397]        :                                       mov dest+di,al
[ 398]        :                                       inc di
[ 399]        :                                       cont1:
[ 400]        :                                       inc si
[ 401]        :                                       loop again
[ 402]        :                                       popa
[ 403]        :                                       endm hex2str
[ 404]        :                                       
[ 405]        :                                       
[ 406]        :                                       
[ 407]        :                                       ;END INPUT OUTPUT
[ 408]        :                                       ;the macro gets double word var and number of left shift.
[ 409]        :                                       ;it returns the var left shifted.
[ 410]        :                                       macro shift_left dword,shft_no
[ 411]        :                                       pusha
[ 412]        :                                       xor ax,ax
[ 413]        :                                       xor bx,bx
[ 414]        :                                       xor si,si
[ 415]        :                                       xor di,di
[ 416]        :                                       xor cx,cx
[ 417]        :                                       xor dx,dx
[ 418]        :                                       
[ 419]        :                                       LOCAL shftt,contt,soff
[ 420]        :                                       
[ 421]        :                                       mov di,2
[ 422]        :                                       mov ax,dword+0
[ 423]        :                                       mov dx,dword+2
[ 424]        :                                       mov cl,shft_no
[ 425]        :                                       shftt:
[ 426]        :                                       rcl ax,1
[ 427]        :                                       pushf
[ 428]        :                                       and ax,1111111111111110b
[ 429]        :                                       rcl dx,1
[ 430]        :                                       pushf
[ 431]        :                                       and dx,1111111111111110b
[ 432]        :                                       popf
[ 433]        :                                       jnc contt
[ 434]        :                                       or ax,0000000000010000b
[ 435]        :                                       contt:
[ 436]        :                                       popf
[ 437]        :                                       jnc soff
[ 438]        :                                       or dx,0000000000000001b
[ 439]        :                                       soff:
[ 440]        :                                       loop shftt
[ 441]        :                                       mov dword+0,ax
[ 442]        :                                       mov dword+2,dx
[ 443]        :                                       popa
[ 444]        :                                       endm shift_left
[ 445]        :                                       
[ 446]        :                                       ;the macro permutate var using permutation table
[ 447]        :                                       ;get:p table,byte index,adding parameter(if not used keep on zero)
[ 448]        :                                       ;return: temp_byte containing the permutated byte.
[ 449]        :                                       macro permute_key pc_table,byte_no,key,addpara
[ 450]        :                                       
[ 451]        :                                       pusha
[ 452]        :                                       LOCAL again,skip_add,skip_check,skip_1,skip_2,skip_3,skip_4,skip_5,skip_6,skip_7,bit_1,bit_2,bit_3,bit_4,bit_5,bit_6,bit_7,end_bit_0,end_bit_1,end_bit_2,end_bit_3,end_bit_4,end_bit_5,end_bit_6,end_bit_7,end_builder,endd
[ 453]        :                                       xor ax,ax
[ 454]        :                                       xor bx,bx
[ 455]        :                                       xor cx,cx
[ 456]        :                                       xor dx,dx
[ 457]        :                                       mov pointer,0000h
[ 458]        :                                       mov temp_byte,00000000b
[ 459]        :                                       mov byte_builder_pointer,0h
[ 460]        :                                       mov ax,8
[ 461]        :                                       mov dx,byte_no
[ 462]        :                                       mul dx
[ 463]        :                                       add ax,offset pc_table
[ 464]        :                                       mov pointer,ax
[ 465]        :                                       xor ax,ax
[ 466]        :                                       xor dx,dx
[ 467]        :                                       
[ 468]        :                                       
[ 469]        :                                       mov cx,8
[ 470]        :                                       again:
[ 471]        :                                       xor bx,bx
[ 472]        :                                       xor ax,ax
[ 473]        :                                       mov bx,pointer
[ 474]        :                                       mov al,[bx]
[ 475]        :                                       xor bx,bx
[ 476]        :                                       mov dx,8
[ 477]        :                                       div dl
[ 478]        :                                       cmp ah,00h
[ 479]        :                                       jnz skip_check
[ 480]        :                                       dec al
[ 481]        :                                       mov ah,08
[ 482]        :                                       skip_check:
[ 483]        :                                       mov selected_byte,al;**** ;maybe al and ah need to be switched, you need to check it out
[ 484]        :                                       mov selected_bit,ah
[ 485]        :                                       mov bx,offset key
[ 486]        :                                       xor ax,ax
[ 487]        :                                       mov al,addpara
[ 488]        :                                       add bx,ax ;in case you want to add by a certain parameter you can use addpara otherwise keep it zero.beware addpara has to be byte size
[ 489]        :                                       xor ax,ax
[ 490]        :                                       mov al,selected_byte
[ 491]        :                                       add bx,ax ;bx gets the offset of the selected byte
[ 492]        :                                       mov dl,[bx] ;the selected byte copy to dl
[ 493]        :                                       
[ 494]        :                                       ;finds the selected bit using "and" and "shl"
[ 495]        :                                       ;you need to add "cmp" before the "jnz endd".you need to add shr's(after delete this comment)
[ 496]        :                                       cmp selected_bit,1
[ 497]        :                                       jnz skip_1
[ 498]        :                                       and dl,10000000b
[ 499]        :                                       jmp endd
[ 500]        :                                       skip_1:
[ 501]        :                                       cmp selected_bit,2
[ 502]        :                                       jnz skip_2
[ 503]        :                                       and dl,01000000b
[ 504]        :                                       shl dl,1
[ 505]        :                                       jmp endd
[ 506]        :                                       skip_2:
[ 507]        :                                       cmp selected_bit,3
[ 508]        :                                       jnz skip_3
[ 509]        :                                       and dl,00100000b
[ 510]        :                                       shl dl,2
[ 511]        :                                       jmp endd
[ 512]        :                                       skip_3:
[ 513]        :                                       cmp selected_bit,4
[ 514]        :                                       jnz skip_4
[ 515]        :                                       and dl,00010000b
[ 516]        :                                       shl dl,3
[ 517]        :                                       jmp endd
[ 518]        :                                       skip_4:
[ 519]        :                                       cmp selected_bit,5
[ 520]        :                                       jnz skip_5
[ 521]        :                                       and dl,00001000b
[ 522]        :                                       shl dl,4
[ 523]        :                                       jmp endd
[ 524]        :                                       skip_5:
[ 525]        :                                       cmp selected_bit,6
[ 526]        :                                       jnz skip_6
[ 527]        :                                       and dl,00000100b
[ 528]        :                                       shl dl,5
[ 529]        :                                       jmp endd
[ 530]        :                                       skip_6:
[ 531]        :                                       cmp selected_bit,7
[ 532]        :                                       jnz skip_7
[ 533]        :                                       and dl,00000010b
[ 534]        :                                       shl dl,6
[ 535]        :                                       jmp endd
[ 536]        :                                       skip_7:
[ 537]        :                                       cmp selected_bit,8
[ 538]        :                                       jnz endd
[ 539]        :                                       and dl,00000001b
[ 540]        :                                       shl dl,7
[ 541]        :                                       endd:
[ 542]        :                                       nop
[ 543]        :                                       
[ 544]        :                                       
[ 545]        :                                       cmp byte_builder_pointer,0
[ 546]        :                                       
[ 547]        :                                       jnz bit_1
[ 548]        :                                       
[ 549]        :                                       cmp dl,10000000b
[ 550]        :                                       jnz end_bit_0
[ 551]        :                                       xor temp_byte,10000000b
[ 552]        :                                       end_bit_0:
[ 553]        :                                       jmp end_builder
[ 554]        :                                       
[ 555]        :                                       bit_1:
[ 556]        :                                       
[ 557]        :                                       cmp byte_builder_pointer,1
[ 558]        :                                       
[ 559]        :                                       jnz bit_2
[ 560]        :                                       
[ 561]        :                                       cmp dl,10000000b
[ 562]        :                                       jnz end_bit_1
[ 563]        :                                       xor temp_byte,01000000b
[ 564]        :                                       end_bit_1:
[ 565]        :                                       jmp end_builder
[ 566]        :                                       
[ 567]        :                                       bit_2:
[ 568]        :                                       
[ 569]        :                                       cmp byte_builder_pointer,2
[ 570]        :                                       
[ 571]        :                                       jnz bit_3
[ 572]        :                                       
[ 573]        :                                       cmp dl,10000000b
[ 574]        :                                       jnz end_bit_2
[ 575]        :                                       xor temp_byte,00100000b
[ 576]        :                                       end_bit_2:
[ 577]        :                                       jmp end_builder
[ 578]        :                                       
[ 579]        :                                       bit_3:
[ 580]        :                                       
[ 581]        :                                       cmp byte_builder_pointer,3
[ 582]        :                                       
[ 583]        :                                       jnz bit_4
[ 584]        :                                       
[ 585]        :                                       cmp dl,10000000b
[ 586]        :                                       jnz end_bit_3
[ 587]        :                                       xor temp_byte,00010000b
[ 588]        :                                       end_bit_3:
[ 589]        :                                       jmp end_builder
[ 590]        :                                       
[ 591]        :                                       bit_4:
[ 592]        :                                       
[ 593]        :                                       cmp byte_builder_pointer,4
[ 594]        :                                       
[ 595]        :                                       jnz bit_5
[ 596]        :                                       
[ 597]        :                                       cmp dl,10000000b
[ 598]        :                                       jnz end_bit_4
[ 599]        :                                       xor temp_byte,00001000b
[ 600]        :                                       end_bit_4:
[ 601]        :                                       jmp end_builder
[ 602]        :                                       
[ 603]        :                                       bit_5:
[ 604]        :                                       
[ 605]        :                                       cmp byte_builder_pointer,5
[ 606]        :                                       
[ 607]        :                                       jnz bit_6
[ 608]        :                                       
[ 609]        :                                       cmp dl,10000000b
[ 610]        :                                       jnz end_bit_5
[ 611]        :                                       xor temp_byte,00000100b
[ 612]        :                                       end_bit_5:
[ 613]        :                                       jmp end_builder
[ 614]        :                                       
[ 615]        :                                       bit_6:
[ 616]        :                                       
[ 617]        :                                       cmp byte_builder_pointer,6
[ 618]        :                                       
[ 619]        :                                       jnz bit_7
[ 620]        :                                       
[ 621]        :                                       cmp dl,10000000b
[ 622]        :                                       jnz end_bit_6
[ 623]        :                                       xor temp_byte,00000010b
[ 624]        :                                       end_bit_6:
[ 625]        :                                       jmp end_builder
[ 626]        :                                       
[ 627]        :                                       bit_7:
[ 628]        :                                       
[ 629]        :                                       cmp byte_builder_pointer,7
[ 630]        :                                       
[ 631]        :                                       jnz end_builder
[ 632]        :                                       
[ 633]        :                                       cmp dl,10000000b
[ 634]        :                                       jnz end_bit_7
[ 635]        :                                       xor temp_byte,00000001b
[ 636]        :                                       end_bit_7:
[ 637]        :                                       end_builder:
[ 638]        :                                       nop
[ 639]        :                                       
[ 640]        :                                       
[ 641]        :                                       inc pointer
[ 642]        :                                       inc byte_builder_pointer
[ 643]        :                                       loop again
[ 644]        :                                       
[ 645]        :                                       popa
[ 646]        :                                       
[ 647]        :                                       endm permute_key
[ 648]        :                                       ;arranges k_plus and do left shifts
[ 649]        :                                       ;get: ekey
[ 650]        :                                       ;return:c,d
[ 651]    0CA3:                                       proc arrange_k_plus
[ 652]        :                                       
[ 653]    0CA3: 60                                    pusha
[ 654]    0CA4: 33 C0                                 xor ax,ax
[ 655]    0CA6: 33 F6                                 xor si,si
[ 656]    0CA8: B9 07 00                              mov cx,7
[ 657]    0CAB:                                       agn_prmt_key:
[ 658]    0CAB: 60 33 C0 33 DB 33 C9 33 D2 C7 06 53   permute_key pc_1,si,ekey,0
                03 00 00 C6 06 51 03 00 C6 06 52 03 
                00 B8 08 00 8B D6 F7 E2 05 10 00 A3 
                53 03 33 C0 33 D2 B9 08 00 33 DB 33 
                C0 8B 1E 53 03 8A 07 33 DB BA 08 00 
                F6 F2 80 FC 00 75 04 FE C8 B4 08 A2 
                4F 03 88 26 50 03 BB 08 00 33 C0 B0 
                00 03 D8 33 C0 A0 4F 03 03 D8 8A 17 
                80 3E 50 03 01 75 06 80 E2 80 E9 8A 
                00 80 3E 50 03 02 75 07 80 E2 40 D0 
                E2 EB 7C 80 3E 50 03 03 75 09 80 E2 
                20 D0 E2 D0 E2 EB 6C 80 3E 50 03 04 
                75 0B 80 E2 10 D0 E2 D0 E2 D0 E2 EB 
                5A 80 3E 50 03 05 75 0D 80 E2 08 D0 
                E2 D0 E2 D0 E2 D0 E2 EB 46 80 3E 50 
                03 06 75 0F 80 E2 04 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 30 80 3E 50 03 07 
                75 11 80 E2 02 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 18 80 3E 50 03 08 
                75 11 80 E2 01 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 D0 E2 90 80 3E 52 03 
                00 75 0D 80 FA 80 75 05 80 36 51 03 
                80 E9 83 00 80 3E 52 03 01 75 0C 80 
                FA 80 75 05 80 36 51 03 40 EB 70 80 
                3E 52 03 02 75 0C 80 FA 80 75 05 80 
                36 51 03 20 EB 5D 80 3E 52 03 03 75 
                0C 80 FA 80 75 05 80 36 51 03 10 EB 
                4A 80 3E 52 03 04 75 0C 80 FA 80 75 
                05 80 36 51 03 08 EB 37 80 3E 52 03 
                05 75 0C 80 FA 80 75 05 80 36 51 03 
                04 EB 24 80 3E 52 03 06 75 0C 80 FA 
                80 75 05 80 36 51 03 02 EB 11 80 3E 
                52 03 07 75 0A 80 FA 80 75 05 80 36 
                51 03 01 90 FF 06 53 03 FE 06 52 03 
                49 E3 03 E9 8F FE 61                
[ 659]    0E4A: A0 51 03                              mov al,temp_byte
[ 660]    0E4D: 88 84 48 03                           mov k_plus+si,al
[ 661]    0E51: 46                                    inc si
[ 662]    0E52: 49 E3 03 E9 53 FE                     loop agn_prmt_key
[ 663]        :                                       
[ 664]    0E58: 33 DB                                 xor bx,bx
[ 665]    0E5A: 8A 1E 49 03                           mov bl,k_plus+1
[ 666]    0E5E: 89 1E 57 03                           mov k_plus_l+2,bx
[ 667]    0E62: 8A 1E 48 03                           mov bl,k_plus
[ 668]    0E66: 89 1E 58 03                           mov k_plus_l+3,bx
[ 669]        :                                       
[ 670]    0E6A: 8A 1E 4B 03                           mov bl,k_plus+3
[ 671]    0E6E: 8A 3E 4A 03                           mov bh,k_plus+2
[ 672]    0E72: 80 E3 F0                              and bl,11110000b
[ 673]    0E75: 89 1E 55 03                           mov k_plus_l,bx
[ 674]        :                                       
[ 675]    0E79: 33 DB                                 xor bx,bx
[ 676]    0E7B: 8A 3E 4B 03                           mov bh,k_plus+3
[ 677]    0E7F: 80 E7 0F                              and bh,00001111b
[ 678]    0E82: 8A 1E 4C 03                           mov bl,k_plus+4
[ 679]    0E86: 89 1E 5B 03                           mov k_plus_r+2,bx
[ 680]    0E8A: 8A 3E 4D 03                           mov bh,k_plus+5
[ 681]    0E8E: 8A 1E 4E 03                           mov bl,k_plus+6
[ 682]    0E92: 89 1E 59 03                           mov k_plus_r,bx
[ 683]        :                                       
[ 684]    0E96: 33 C0                                 xor ax,ax
[ 685]    0E98: 33 D2                                 xor dx,dx
[ 686]    0E9A: 33 FF                                 xor di,di
[ 687]    0E9C: 33 DB                                 xor bx,bx
[ 688]    0E9E: 33 F6                                 xor si,si
[ 689]    0EA0: B9 10 00                              mov cx,16
[ 690]    0EA3: BF 02 00                              mov di,2
[ 691]    0EA6: A1 55 03                              mov ax,k_plus_l+0
[ 692]    0EA9: 8B 16 57 03                           mov dx,k_plus_l+2
[ 693]    0EAD:                                       shuv:
[ 694]    0EAD: 51                                    push cx
[ 695]    0EAE: 33 C9                                 xor cx,cx
[ 696]    0EB0: 8A 8C 5D 03                           mov cl,shifts+si
[ 697]    0EB4:                                       shft:
[ 698]    0EB4: D1 D0                                 rcl ax,1
[ 699]    0EB6: 9C                                    pushf
[ 700]    0EB7: 25 FE FF                              and ax,1111111111111110b
[ 701]    0EBA: D1 D2                                 rcl dx,1
[ 702]    0EBC: 9C                                    pushf
[ 703]    0EBD: 83 E2 FE                              and dx,1111111111111110b
[ 704]    0EC0: 9D                                    popf
[ 705]    0EC1: 73 03                                 jnc cont
[ 706]    0EC3: 0D 10 00                              or ax,0000000000010000b
[ 707]    0EC6:                                       cont:
[ 708]    0EC6: 9D                                    popf
[ 709]    0EC7: 73 03                                 jnc sof
[ 710]    0EC9: 83 CA 01                              or dx,0000000000000001b
[ 711]    0ECC:                                       sof:
[ 712]    0ECC: E2 E6                                 loop shft
[ 713]    0ECE: 89 87 6D 03                           mov c+bx,ax
[ 714]    0ED2: 89 95 6D 03                           mov c+di,dx
[ 715]    0ED6: 46                                    inc si
[ 716]    0ED7: 83 C3 04                              add bx,4
[ 717]    0EDA: 83 C7 04                              add di,4
[ 718]    0EDD: 59                                    pop cx
[ 719]    0EDE: E2 CD                                 loop shuv
[ 720]        :                                       
[ 721]    0EE0: 33 C0                                 xor ax,ax
[ 722]    0EE2: 33 DB                                 xor bx,bx
[ 723]    0EE4: 33 F6                                 xor si,si
[ 724]    0EE6: 33 FF                                 xor di,di
[ 725]    0EE8: 33 C9                                 xor cx,cx
[ 726]    0EEA: 33 D2                                 xor dx,dx
[ 727]        :                                       
[ 728]        :                                       
[ 729]    0EEC: BF 02 00                              mov di,2
[ 730]    0EEF: A1 59 03                              mov ax,k_plus_r+0
[ 731]    0EF2: 8B 16 5B 03                           mov dx,k_plus_r+2
[ 732]    0EF6: B1 04                                 mov cl,4
[ 733]    0EF8:                                       shftt:
[ 734]    0EF8: D1 D0                                 rcl ax,1
[ 735]    0EFA: 9C                                    pushf
[ 736]    0EFB: 25 FE FF                              and ax,1111111111111110b
[ 737]    0EFE: D1 D2                                 rcl dx,1
[ 738]    0F00: 9C                                    pushf
[ 739]    0F01: 83 E2 FE                              and dx,1111111111111110b
[ 740]    0F04: 9D                                    popf
[ 741]    0F05: 73 03                                 jnc contt
[ 742]    0F07: 0D 10 00                              or ax,0000000000010000b
[ 743]    0F0A:                                       contt:
[ 744]    0F0A: 9D                                    popf
[ 745]    0F0B: 73 03                                 jnc soff
[ 746]    0F0D: 83 CA 01                              or dx,0000000000000001b
[ 747]    0F10:                                       soff:
[ 748]    0F10: E2 E6                                 loop shftt
[ 749]    0F12: A3 59 03                              mov k_plus_r+0,ax
[ 750]    0F15: 89 16 5B 03                           mov k_plus_r+2,dx
[ 751]        :                                       
[ 752]    0F19: 33 C0                                 xor ax,ax
[ 753]    0F1B: 33 DB                                 xor bx,bx
[ 754]    0F1D: 33 F6                                 xor si,si
[ 755]    0F1F: 33 FF                                 xor di,di
[ 756]    0F21: 33 C9                                 xor cx,cx
[ 757]    0F23: 33 D2                                 xor dx,dx
[ 758]        :                                       
[ 759]    0F25: B9 10 00                              mov cx,16
[ 760]    0F28: BF 02 00                              mov di,2
[ 761]    0F2B: A1 59 03                              mov ax,k_plus_r+0
[ 762]    0F2E: 8B 16 5B 03                           mov dx,k_plus_r+2
[ 763]    0F32:                                       shuvvv:
[ 764]    0F32: 51                                    push cx
[ 765]    0F33: 33 C9                                 xor cx,cx
[ 766]    0F35: 8A 8C 5D 03                           mov cl,shifts+si
[ 767]    0F39:                                       shfttt:
[ 768]    0F39: D1 D0                                 rcl ax,1
[ 769]    0F3B: 9C                                    pushf
[ 770]    0F3C: 25 FE FF                              and ax,1111111111111110b
[ 771]    0F3F: D1 D2                                 rcl dx,1
[ 772]    0F41: 9C                                    pushf
[ 773]    0F42: 83 E2 FE                              and dx,1111111111111110b
[ 774]    0F45: 9D                                    popf
[ 775]    0F46: 73 03                                 jnc conttt
[ 776]    0F48: 0D 10 00                              or ax,0000000000010000b
[ 777]    0F4B:                                       conttt:
[ 778]    0F4B: 9D                                    popf
[ 779]    0F4C: 73 03                                 jnc sofff
[ 780]    0F4E: 83 CA 01                              or dx,0000000000000001b
[ 781]    0F51:                                       sofff:
[ 782]    0F51: E2 E6                                 loop shfttt
[ 783]    0F53: 89 87 AD 03                           mov d+bx,ax
[ 784]    0F57: 89 95 AD 03                           mov d+di,dx
[ 785]    0F5B: 46                                    inc si
[ 786]    0F5C: 83 C3 04                              add bx,4
[ 787]    0F5F: 83 C7 04                              add di,4
[ 788]    0F62: 59                                    pop cx
[ 789]    0F63: E2 CD                                 loop shuvvv
[ 790]        :                                       
[ 791]        :                                       
[ 792]    0F65: 61                                    popa
[ 793]    0F66: C3                                    ret
[ 794]        :                                       endp arrange_k_plus
[ 795]        :                                       ;join lefts part of k with right parts of k
[ 796]        :                                       ;get:c,d
[ 797]        :                                       ;return:cd
[ 798]    0F67:                                       proc join_16_cd
[ 799]    0F67: 60                                    pusha
[ 800]    0F68: 33 FF                                 xor di,di
[ 801]    0F6A: 33 F6                                 xor si,si
[ 802]    0F6C: 33 C9                                 xor cx,cx
[ 803]    0F6E: BF 02 00                              mov di,2
[ 804]    0F71: B9 10 00                              mov cx,16
[ 805]        :                                       
[ 806]    0F74:                                       repeat:
[ 807]    0F74: 33 DB                                 xor bx,bx
[ 808]    0F76: 33 C0                                 xor ax,ax
[ 809]    0F78: 33 D2                                 xor dx,dx
[ 810]        :                                       
[ 811]    0F7A: C6 06 51 03 00                        mov temp_byte,0h
[ 812]    0F7F: 8B 85 6D 03                           mov ax,c+di
[ 813]    0F83: 88 A4 ED 03                           mov cd+si,ah
[ 814]    0F87: 46                                    inc si
[ 815]    0F88: 88 84 ED 03                           mov cd+si,al
[ 816]    0F8C: 46                                    inc si
[ 817]    0F8D: 83 EF 02                              sub di,2
[ 818]    0F90: 8B 85 6D 03                           mov ax,c+di
[ 819]    0F94: 88 A4 ED 03                           mov cd+si,ah
[ 820]    0F98: 46                                    inc si
[ 821]    0F99: 83 C7 02                              add di,2
[ 822]        :                                       
[ 823]    0F9C: A2 51 03                              mov temp_byte,al
[ 824]    0F9F: 8B 95 AD 03                           mov dx,d+di
[ 825]    0FA3: 80 E6 F0                              and dh,11110000b
[ 826]    0FA6: D0 EE D0 EE D0 EE D0 EE               shr dh,4
[ 827]    0FAE: 08 36 51 03                           or temp_byte,dh
[ 828]    0FB2: 8A 1E 51 03                           mov bl,temp_byte
[ 829]    0FB6: 88 9C ED 03                           mov cd+si,bl
[ 830]    0FBA: 8B 9D AD 03                           mov bx,d+di
[ 831]    0FBE: 80 E7 0F                              and bh,00001111b
[ 832]    0FC1: 89 9D AD 03                           mov d+di,bx
[ 833]    0FC5: 83 EF 02                              sub di,2
[ 834]    0FC8: 46                                    inc si
[ 835]        :                                       
[ 836]        :                                       ;shift left for c
[ 837]    0FC9: 8B 9D AD 03                           mov bx,d+di
[ 838]    0FCD: 89 1E 5D 04                           mov temp_dword,bx
[ 839]    0FD1: 8B 9D AF 03                           mov bx,d+di+2
[ 840]    0FD5: 89 1E 5F 04                           mov temp_dword+2,bx
[ 841]    0FD9: 60 33 C0 33 DB 33 F6 33 FF 33 C9 33   shift_left temp_dword,4
                D2 BF 02 00 A1 5D 04 8B 16 5F 04 B1 
                04 D1 D0 9C 25 FE FF D1 D2 9C 83 E2 
                FE 9D 73 03 0D 10 00 9D 73 03 83 CA 
                01 E2 E6 A3 5D 04 89 16 5F 04 61    
[ 842]        :                                       ;trans temp_dword to cd
[ 843]    1014: 8B 16 5F 04                           mov dx,temp_dword+2
[ 844]    1018: 88 B4 ED 03                           mov cd+si,dh
[ 845]    101C: 46                                    inc si
[ 846]    101D: 88 94 ED 03                           mov cd+si,dl
[ 847]    1021: 46                                    inc si
[ 848]    1022: 8B 16 5D 04                           mov dx,temp_dword+0
[ 849]    1026: 88 B4 ED 03                           mov cd+si,dh
[ 850]    102A: 46                                    inc si
[ 851]    102B: 83 C7 06                              add di,6
[ 852]    102E: 49 E3 03 E9 40 FF                     loop repeat
[ 853]    1034: 61                                    popa
[ 854]    1035: C3                                    ret
[ 855]        :                                       endp join_16_cd
[ 856]        :                                       ;the proc generates k using permutation with pc2
[ 857]        :                                       ;get:cd
[ 858]        :                                       ;return:k
[ 859]    1036:                                       proc generate_k
[ 860]        :                                       
[ 861]    1036: 60                                    pusha
[ 862]    1037: 33 C9                                 xor cx,cx
[ 863]    1039: 33 F6                                 xor si,si
[ 864]    103B: 33 FF                                 xor di,di
[ 865]    103D: 33 DB                                 xor bx,bx
[ 866]    103F: 33 C0                                 xor ax,ax
[ 867]    1041: C6 06 C1 04 00                        mov para,0h
[ 868]    1046: B9 10 00                              mov cx,16
[ 869]    1049:                                       repeat3:
[ 870]    1049: 51                                    push cx
[ 871]    104A: B9 06 00                              mov cx,6
[ 872]    104D:                                       repeat2:
[ 873]    104D: 60 33 C0 33 DB 33 C9 33 D2 C7 06 53   permute_key pc_2,di,cd,para
                03 00 00 C6 06 51 03 00 C6 06 52 03 
                00 B8 08 00 8B D7 F7 E2 05 48 00 A3 
                53 03 33 C0 33 D2 B9 08 00 33 DB 33 
                C0 8B 1E 53 03 8A 07 33 DB BA 08 00 
                F6 F2 80 FC 00 75 04 FE C8 B4 08 A2 
                4F 03 88 26 50 03 BB ED 03 33 C0 A0 
                C1 04 03 D8 33 C0 A0 4F 03 03 D8 8A 
                17 80 3E 50 03 01 75 06 80 E2 80 E9 
                8A 00 80 3E 50 03 02 75 07 80 E2 40 
                D0 E2 EB 7C 80 3E 50 03 03 75 09 80 
                E2 20 D0 E2 D0 E2 EB 6C 80 3E 50 03 
                04 75 0B 80 E2 10 D0 E2 D0 E2 D0 E2 
                EB 5A 80 3E 50 03 05 75 0D 80 E2 08 
                D0 E2 D0 E2 D0 E2 D0 E2 EB 46 80 3E 
                50 03 06 75 0F 80 E2 04 D0 E2 D0 E2 
                D0 E2 D0 E2 D0 E2 EB 30 80 3E 50 03 
                07 75 11 80 E2 02 D0 E2 D0 E2 D0 E2 
                D0 E2 D0 E2 D0 E2 EB 18 80 3E 50 03 
                08 75 11 80 E2 01 D0 E2 D0 E2 D0 E2 
                D0 E2 D0 E2 D0 E2 D0 E2 90 80 3E 52 
                03 00 75 0D 80 FA 80 75 05 80 36 51 
                03 80 E9 83 00 80 3E 52 03 01 75 0C 
                80 FA 80 75 05 80 36 51 03 40 EB 70 
                80 3E 52 03 02 75 0C 80 FA 80 75 05 
                80 36 51 03 20 EB 5D 80 3E 52 03 03 
                75 0C 80 FA 80 75 05 80 36 51 03 10 
                EB 4A 80 3E 52 03 04 75 0C 80 FA 80 
                75 05 80 36 51 03 08 EB 37 80 3E 52 
                03 05 75 0C 80 FA 80 75 05 80 36 51 
                03 04 EB 24 80 3E 52 03 06 75 0C 80 
                FA 80 75 05 80 36 51 03 02 EB 11 80 
                3E 52 03 07 75 0A 80 FA 80 75 05 80 
                36 51 03 01 90 FF 06 53 03 FE 06 52 
                03 49 E3 03 E9 8E FE 61             
[ 874]    11ED: A0 51 03                              mov al,temp_byte
[ 875]    11F0: 88 84 61 04                           mov k+si,al
[ 876]    11F4: 46                                    inc si
[ 877]    11F5: 47                                    inc di
[ 878]    11F6: 49 E3 03 E9 51 FE                     loop repeat2
[ 879]    11FC: 33 FF                                 xor di,di
[ 880]    11FE: 80 06 C1 04 07                        add para,7
[ 881]    1203: 59                                    pop cx
[ 882]    1204: 49 E3 03 E9 3F FE                     loop repeat3
[ 883]    120A: 61                                    popa
[ 884]    120B: C3                                    ret
[ 885]        :                                       endp generate_k
[ 886]        :                                       ;arranges ip using permutate m with ip_tbl, and arranges l_0 and r_0
[ 887]        :                                       ;get: m
[ 888]        :                                       ;return: l_0,r_0
[ 889]    120C:                                       proc arrange_ip
[ 890]    120C: 60                                    pusha
[ 891]    120D: 33 C9                                 xor cx,cx
[ 892]    120F: 33 F6                                 xor si,si
[ 893]    1211: 33 C0                                 xor ax,ax
[ 894]    1213: B9 08 00                              mov cx,8
[ 895]    1216:                                       agn:
[ 896]    1216: 60 33 C0 33 DB 33 C9 33 D2 C7 06 53   permute_key ip_tbl,si,m,0
                03 00 00 C6 06 51 03 00 C6 06 52 03 
                00 B8 08 00 8B D6 F7 E2 05 78 00 A3 
                53 03 33 C0 33 D2 B9 08 00 33 DB 33 
                C0 8B 1E 53 03 8A 07 33 DB BA 08 00 
                F6 F2 80 FC 00 75 04 FE C8 B4 08 A2 
                4F 03 88 26 50 03 BB 00 00 33 C0 B0 
                00 03 D8 33 C0 A0 4F 03 03 D8 8A 17 
                80 3E 50 03 01 75 06 80 E2 80 E9 8A 
                00 80 3E 50 03 02 75 07 80 E2 40 D0 
                E2 EB 7C 80 3E 50 03 03 75 09 80 E2 
                20 D0 E2 D0 E2 EB 6C 80 3E 50 03 04 
                75 0B 80 E2 10 D0 E2 D0 E2 D0 E2 EB 
                5A 80 3E 50 03 05 75 0D 80 E2 08 D0 
                E2 D0 E2 D0 E2 D0 E2 EB 46 80 3E 50 
                03 06 75 0F 80 E2 04 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 30 80 3E 50 03 07 
                75 11 80 E2 02 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 18 80 3E 50 03 08 
                75 11 80 E2 01 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 D0 E2 90 80 3E 52 03 
                00 75 0D 80 FA 80 75 05 80 36 51 03 
                80 E9 83 00 80 3E 52 03 01 75 0C 80 
                FA 80 75 05 80 36 51 03 40 EB 70 80 
                3E 52 03 02 75 0C 80 FA 80 75 05 80 
                36 51 03 20 EB 5D 80 3E 52 03 03 75 
                0C 80 FA 80 75 05 80 36 51 03 10 EB 
                4A 80 3E 52 03 04 75 0C 80 FA 80 75 
                05 80 36 51 03 08 EB 37 80 3E 52 03 
                05 75 0C 80 FA 80 75 05 80 36 51 03 
                04 EB 24 80 3E 52 03 06 75 0C 80 FA 
                80 75 05 80 36 51 03 02 EB 11 80 3E 
                52 03 07 75 0A 80 FA 80 75 05 80 36 
                51 03 01 90 FF 06 53 03 FE 06 52 03 
                49 E3 03 E9 8F FE 61                
[ 897]    13B5: A0 51 03                              mov al,temp_byte
[ 898]    13B8: 88 84 C2 04                           mov ip+si,al
[ 899]    13BC: 46                                    inc si
[ 900]    13BD: 49 E3 03 E9 53 FE                     loop agn
[ 901]    13C3: 33 C9                                 xor cx,cx
[ 902]    13C5: 33 F6                                 xor si,si
[ 903]    13C7: 33 C0                                 xor ax,ax
[ 904]    13C9: 33 FF                                 xor di,di
[ 905]    13CB: B9 04 00                              mov cx,4
[ 906]    13CE:                                       agn2:
[ 907]    13CE: 8A 84 C2 04                           mov al,ip+si
[ 908]    13D2: 88 85 CA 04                           mov l_0+di,al
[ 909]    13D6: 47                                    inc di
[ 910]    13D7: 46                                    inc si
[ 911]    13D8: E2 F4                                 loop agn2
[ 912]    13DA: B9 04 00                              mov cx,4
[ 913]    13DD: 33 FF                                 xor di,di
[ 914]    13DF:                                       agn3:
[ 915]    13DF: 8A 84 C2 04                           mov al,ip+si
[ 916]    13E3: 88 85 CE 04                           mov r_0+di,al
[ 917]    13E7: 47                                    inc di
[ 918]    13E8: 46                                    inc si
[ 919]    13E9: E2 F4                                 loop agn3
[ 920]        :                                       
[ 921]    13EB: 61                                    popa
[ 922]    13EC: C3                                    ret
[ 923]        :                                       endp arrange_ip
[ 924]        :                                       ;the proc creating next l using feistel
[ 925]        :                                       ;get: r_0/r
[ 926]        :                                       ;return:l,lp
[ 927]    13ED:                                       proc create_l
[ 928]    13ED: 60                                    pusha
[ 929]    13EE: 33 F6                                 xor si,si;l index pointer(0 is 1, 1 is 2 and so on..)
[ 930]    13F0: 33 FF                                 xor di,di;l byte pointer
[ 931]    13F2: 33 C0                                 xor ax,ax
[ 932]    13F4: 33 C9                                 xor cx,cx
[ 933]        :                                       ;create l_1
[ 934]        :                                       
[ 935]        :                                       ;1
[ 936]    13F6: 80 3E 58 05 00                        cmp l_index,0
[ 937]    13FB: 75 10                                 jnz skp_i0
[ 938]    13FD: B9 04 00                              mov cx,4
[ 939]    1400:                                       cpy:
[ 940]    1400: 8A 85 CE 04                           mov al,r_0+di
[ 941]    1404: 88 85 D2 04                           mov l+di,al
[ 942]    1408: 47                                    inc di
[ 943]    1409: E2 F5                                 loop cpy
[ 944]    140B: EB 24                                 jmp end_i
[ 945]        :                                       
[ 946]    140D:                                       skp_i0:
[ 947]        :                                       ;create l_2-16
[ 948]    140D: 33 C9                                 xor cx,cx
[ 949]    140F: 33 F6                                 xor si,si
[ 950]    1411: 33 C0                                 xor ax,ax
[ 951]    1413: B9 04 00                              mov cx,4
[ 952]        :                                       ;copy old l to lp
[ 953]    1416:                                       cpy_lp:
[ 954]    1416: 8A 84 D2 04                           mov al,l+si
[ 955]    141A: 88 84 74 05                           mov lp+si,al
[ 956]    141E: 46                                    inc si
[ 957]    141F: E2 F5                                 loop cpy_lp
[ 958]        :                                       
[ 959]        :                                       ;copy old r to l
[ 960]    1421: 33 F6                                 xor si,si
[ 961]    1423: B9 04 00                              mov cx,4
[ 962]    1426:                                       cpy_r2l:
[ 963]    1426: 8A 84 12 05                           mov al,r+si
[ 964]    142A: 88 84 D2 04                           mov l+si,al
[ 965]    142E: 46                                    inc si
[ 966]    142F: E2 F5                                 loop cpy_r2l
[ 967]    1431:                                       end_i:
[ 968]    1431: FE 06 58 05                           inc l_index
[ 969]        :                                       
[ 970]    1435: 61                                    popa
[ 971]    1436: C3                                    ret
[ 972]        :                                       endp create_l
[ 973]        :                                       ;the proc creating next r using feistel
[ 974]        :                                       ;get: l
[ 975]        :                                       ;return:r,rp
[ 976]    1437:                                       proc dec_r
[ 977]    1437: 60                                    pusha
[ 978]        :                                       ;create rp(previous r)
[ 979]    1438: BE 12 05                              mov si,offset r
[ 980]    143B: BF 80 05                              mov di,offset rp
[ 981]    143E: B9 04 00                              mov cx,4
[ 982]    1441: F3                                    rep
[ 983]    1442: A4                                    movsb
[ 984]        :                                       ;copy old l to r
[ 985]    1443: BE D2 04                              mov si,offset l
[ 986]    1446: BF 12 05                              mov di,offset r
[ 987]    1449: B9 04 00                              mov cx,4
[ 988]    144C: F3                                    rep
[ 989]    144D: A4                                    movsb
[ 990]    144E: FE 0E 59 05                           dec r_index
[ 991]    1452: 61                                    popa
[ 992]    1453: C3                                    ret
[ 993]        :                                       endp dec_r
[ 994]        :                                       ;creates r using feistel
[ 995]        :                                       ;get:l/l_0,k
[ 996]        :                                       ;return:r
[ 997]    1454:                                       proc create_r
[ 998]    1454: 60                                    pusha
[ 999]        :                                       
[1000]    1455: 33 F6                                 xor si,si
[1001]    1457: 33 FF                                 xor di,di
[1002]    1459: 33 FF                                 xor di,di
[1003]    145B: 33 C0                                 xor ax,ax
[1004]    145D: 33 C9                                 xor cx,cx
[1005]    145F: 33 DB                                 xor bx,bx
[1006]    1461: C6 06 C1 04 00                        mov para,0h
[1007]        :                                       ;function f
[1008]        :                                       ;generate e,
[1009]    1466: 80 3E 59 05 00                        cmp r_index,0
[1010]    146B: 74 03 E9 B4 01                        jnz cont1
[1011]    1470: B9 06 00                              mov cx,6
[1012]    1473:                                       agn4:
[1013]    1473: 60 33 C0 33 DB 33 C9 33 D2 C7 06 53   permute_key e_tbl,si,r_0,0
                03 00 00 C6 06 51 03 00 C6 06 52 03 
                00 B8 08 00 8B D6 F7 E2 05 B8 00 A3 
                53 03 33 C0 33 D2 B9 08 00 33 DB 33 
                C0 8B 1E 53 03 8A 07 33 DB BA 08 00 
                F6 F2 80 FC 00 75 04 FE C8 B4 08 A2 
                4F 03 88 26 50 03 BB CE 04 33 C0 B0 
                00 03 D8 33 C0 A0 4F 03 03 D8 8A 17 
                80 3E 50 03 01 75 06 80 E2 80 E9 8A 
                00 80 3E 50 03 02 75 07 80 E2 40 D0 
                E2 EB 7C 80 3E 50 03 03 75 09 80 E2 
                20 D0 E2 D0 E2 EB 6C 80 3E 50 03 04 
                75 0B 80 E2 10 D0 E2 D0 E2 D0 E2 EB 
                5A 80 3E 50 03 05 75 0D 80 E2 08 D0 
                E2 D0 E2 D0 E2 D0 E2 EB 46 80 3E 50 
                03 06 75 0F 80 E2 04 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 30 80 3E 50 03 07 
                75 11 80 E2 02 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 18 80 3E 50 03 08 
                75 11 80 E2 01 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 D0 E2 90 80 3E 52 03 
                00 75 0D 80 FA 80 75 05 80 36 51 03 
                80 E9 83 00 80 3E 52 03 01 75 0C 80 
                FA 80 75 05 80 36 51 03 40 EB 70 80 
                3E 52 03 02 75 0C 80 FA 80 75 05 80 
                36 51 03 20 EB 5D 80 3E 52 03 03 75 
                0C 80 FA 80 75 05 80 36 51 03 10 EB 
                4A 80 3E 52 03 04 75 0C 80 FA 80 75 
                05 80 36 51 03 08 EB 37 80 3E 52 03 
                05 75 0C 80 FA 80 75 05 80 36 51 03 
                04 EB 24 80 3E 52 03 06 75 0C 80 FA 
                80 75 05 80 36 51 03 02 EB 11 80 3E 
                52 03 07 75 0A 80 FA 80 75 05 80 36 
                51 03 01 90 FF 06 53 03 FE 06 52 03 
                49 E3 03 E9 8F FE 61                
[1014]    1612: 8A 1E 51 03                           mov bl,temp_byte
[1015]    1616: 88 9C 52 05                           mov e+si,bl
[1016]    161A: 46                                    inc si
[1017]    161B: 49 E3 03 E9 52 FE                     loop agn4
[1018]    1621: E9 B1 01                              jmp endd_e
[1019]        :                                       
[1020]    1624:                                       cont1:
[1021]    1624: B9 06 00                              mov cx,6
[1022]    1627:                                       agn5:
[1023]    1627: 60 33 C0 33 DB 33 C9 33 D2 C7 06 53   permute_key e_tbl,si,r,0
                03 00 00 C6 06 51 03 00 C6 06 52 03 
                00 B8 08 00 8B D6 F7 E2 05 B8 00 A3 
                53 03 33 C0 33 D2 B9 08 00 33 DB 33 
                C0 8B 1E 53 03 8A 07 33 DB BA 08 00 
                F6 F2 80 FC 00 75 04 FE C8 B4 08 A2 
                4F 03 88 26 50 03 BB 12 05 33 C0 B0 
                00 03 D8 33 C0 A0 4F 03 03 D8 8A 17 
                80 3E 50 03 01 75 06 80 E2 80 E9 8A 
                00 80 3E 50 03 02 75 07 80 E2 40 D0 
                E2 EB 7C 80 3E 50 03 03 75 09 80 E2 
                20 D0 E2 D0 E2 EB 6C 80 3E 50 03 04 
                75 0B 80 E2 10 D0 E2 D0 E2 D0 E2 EB 
                5A 80 3E 50 03 05 75 0D 80 E2 08 D0 
                E2 D0 E2 D0 E2 D0 E2 EB 46 80 3E 50 
                03 06 75 0F 80 E2 04 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 30 80 3E 50 03 07 
                75 11 80 E2 02 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 18 80 3E 50 03 08 
                75 11 80 E2 01 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 D0 E2 90 80 3E 52 03 
                00 75 0D 80 FA 80 75 05 80 36 51 03 
                80 E9 83 00 80 3E 52 03 01 75 0C 80 
                FA 80 75 05 80 36 51 03 40 EB 70 80 
                3E 52 03 02 75 0C 80 FA 80 75 05 80 
                36 51 03 20 EB 5D 80 3E 52 03 03 75 
                0C 80 FA 80 75 05 80 36 51 03 10 EB 
                4A 80 3E 52 03 04 75 0C 80 FA 80 75 
                05 80 36 51 03 08 EB 37 80 3E 52 03 
                05 75 0C 80 FA 80 75 05 80 36 51 03 
                04 EB 24 80 3E 52 03 06 75 0C 80 FA 
                80 75 05 80 36 51 03 02 EB 11 80 3E 
                52 03 07 75 0A 80 FA 80 75 05 80 36 
                51 03 01 90 FF 06 53 03 FE 06 52 03 
                49 E3 03 E9 8F FE 61                
[1024]    17C6: 8A 1E 51 03                           mov bl,temp_byte
[1025]    17CA: 88 9C 52 05                           mov e+si,bl
[1026]    17CE: 46                                    inc si
[1027]    17CF: 49 E3 03 E9 52 FE                     loop agn5
[1028]    17D5:                                       endd_e:
[1029]        :                                       
[1030]    17D5: 33 F6                                 xor si,si
[1031]    17D7: 33 FF                                 xor di,di
[1032]    17D9: A0 59 05                              mov al,r_index
[1033]    17DC: B3 06                                 mov bl,6
[1034]    17DE: F6 E3                                 mul bl
[1035]    17E0: A2 C1 04                              mov para,al
[1036]        :                                       
[1037]    17E3: 60 33 F6 33 C0 33 D2 33 C9 33 FF B0   xor_multibytes e,k,6,0,para
                00 8B F8 A0 C1 04 8B F0 33 C0 B9 06 
                00 8A 85 52 05 8A 94 61 04 32 C2 88 
                85 52 05 46 47 E2 EE 61             
[1038]        :                                       
[1039]    180F: E8 C3 02                              call generate_8_b
[1040]    1812: E8 4C 03                              call access_s_boxes
[1041]    1815: E8 27 04                              call arrange_f
[1042]        :                                       
[1043]        :                                       ;1
[1044]    1818: 80 3E 59 05 00                        cmp r_index,0
[1045]    181D: 75 2D                                 jnz skp_bld0
[1046]        :                                       
[1047]    181F: 60 33 F6 33 C0 33 D2 33 C9 33 FF B0   xor_multibytes f,l_0,4,0,0
                00 8B F8 B0 00 8B F0 33 C0 B9 04 00 
                8A 85 68 05 8A 94 CA 04 32 C2 88 85 
                68 05 46 47 E2 EE 61                
[1048]    184A: EB 2B                                 jmp skp_rest
[1049]        :                                       
[1050]        :                                       ;2-16
[1051]    184C:                                       skp_bld0:
[1052]    184C: 60 33 F6 33 C0 33 D2 33 C9 33 FF B0   xor_multibytes f,lp,4,0,0
                00 8B F8 B0 00 8B F0 33 C0 B9 04 00 
                8A 85 68 05 8A 94 74 05 32 C2 88 85 
                68 05 46 47 E2 EE 61                
[1053]        :                                       
[1054]    1877:                                       skp_rest:
[1055]        :                                       
[1056]    1877: 33 F6                                 xor si,si
[1057]    1879: 33 C9                                 xor cx,cx
[1058]    187B: 33 C0                                 xor ax,ax
[1059]    187D: B9 04 00                              mov cx,4
[1060]        :                                       
[1061]    1880:                                       cpy2:
[1062]    1880: 8A 84 68 05                           mov al,f+si
[1063]    1884: 88 84 12 05                           mov r+si,al
[1064]    1888: 46                                    inc si
[1065]    1889: E2 F5                                 loop cpy2
[1066]        :                                       
[1067]    188B: FE 06 59 05                           inc r_index
[1068]    188F: 61                                    popa
[1069]    1890: C3                                    ret
[1070]        :                                       endp create_r
[1071]        :                                       ;creates r using feistel
[1072]        :                                       ;get:r,k
[1073]        :                                       ;return:l
[1074]    1891:                                       proc dec_l
[1075]    1891: 60                                    pusha
[1076]    1892: 33 C0                                 xor ax,ax
[1077]    1894: 33 F6                                 xor si,si
[1078]    1896: 33 FF                                 xor di,di
[1079]    1898: 33 DB                                 xor bx,bx
[1080]    189A: 33 C9                                 xor cx,cx
[1081]        :                                       
[1082]        :                                       ;f function decryption
[1083]        :                                       ;generate b
[1084]    189C: B9 06 00                              mov cx,6
[1085]    189F:                                       dec_b:
[1086]    189F: 60 33 C0 33 DB 33 C9 33 D2 C7 06 53   permute_key e_tbl,si,l,0
                03 00 00 C6 06 51 03 00 C6 06 52 03 
                00 B8 08 00 8B D6 F7 E2 05 B8 00 A3 
                53 03 33 C0 33 D2 B9 08 00 33 DB 33 
                C0 8B 1E 53 03 8A 07 33 DB BA 08 00 
                F6 F2 80 FC 00 75 04 FE C8 B4 08 A2 
                4F 03 88 26 50 03 BB D2 04 33 C0 B0 
                00 03 D8 33 C0 A0 4F 03 03 D8 8A 17 
                80 3E 50 03 01 75 06 80 E2 80 E9 8A 
                00 80 3E 50 03 02 75 07 80 E2 40 D0 
                E2 EB 7C 80 3E 50 03 03 75 09 80 E2 
                20 D0 E2 D0 E2 EB 6C 80 3E 50 03 04 
                75 0B 80 E2 10 D0 E2 D0 E2 D0 E2 EB 
                5A 80 3E 50 03 05 75 0D 80 E2 08 D0 
                E2 D0 E2 D0 E2 D0 E2 EB 46 80 3E 50 
                03 06 75 0F 80 E2 04 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 30 80 3E 50 03 07 
                75 11 80 E2 02 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 18 80 3E 50 03 08 
                75 11 80 E2 01 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 D0 E2 90 80 3E 52 03 
                00 75 0D 80 FA 80 75 05 80 36 51 03 
                80 E9 83 00 80 3E 52 03 01 75 0C 80 
                FA 80 75 05 80 36 51 03 40 EB 70 80 
                3E 52 03 02 75 0C 80 FA 80 75 05 80 
                36 51 03 20 EB 5D 80 3E 52 03 03 75 
                0C 80 FA 80 75 05 80 36 51 03 10 EB 
                4A 80 3E 52 03 04 75 0C 80 FA 80 75 
                05 80 36 51 03 08 EB 37 80 3E 52 03 
                05 75 0C 80 FA 80 75 05 80 36 51 03 
                04 EB 24 80 3E 52 03 06 75 0C 80 FA 
                80 75 05 80 36 51 03 02 EB 11 80 3E 
                52 03 07 75 0A 80 FA 80 75 05 80 36 
                51 03 01 90 FF 06 53 03 FE 06 52 03 
                49 E3 03 E9 8F FE 61                
[1087]    1A3E: 8A 1E 51 03                           mov bl,temp_byte
[1088]    1A42: 88 9C 52 05                           mov e+si,bl
[1089]    1A46: 46                                    inc si
[1090]    1A47: 49 E3 03 E9 52 FE                     loop dec_b
[1091]        :                                       
[1092]    1A4D: 33 F6                                 xor si,si
[1093]    1A4F: 33 FF                                 xor di,di
[1094]    1A51: A0 58 05                              mov al,l_index
[1095]    1A54: B3 06                                 mov bl,6
[1096]    1A56: F6 E3                                 mul bl
[1097]    1A58: A2 C1 04                              mov para,al
[1098]        :                                       
[1099]    1A5B: 60 33 F6 33 C0 33 D2 33 C9 33 FF B0   xor_multibytes e,k,6,0,para
                00 8B F8 A0 C1 04 8B F0 33 C0 B9 06 
                00 8A 85 52 05 8A 94 61 04 32 C2 88 
                85 52 05 46 47 E2 EE 61             
[1100]        :                                       
[1101]    1A87: E8 4B 00                              call generate_8_b
[1102]    1A8A: E8 D4 00                              call access_s_boxes
[1103]    1A8D: E8 AF 01                              call arrange_f
[1104]        :                                       
[1105]    1A90: 60 33 F6 33 C0 33 D2 33 C9 33 FF B0   xor_multibytes f,rp,4,0,0
                00 8B F8 B0 00 8B F0 33 C0 B9 04 00 
                8A 85 68 05 8A 94 80 05 32 C2 88 85 
                68 05 46 47 E2 EE 61                
[1106]        :                                       
[1107]    1ABB: 33 F6                                 xor si,si
[1108]    1ABD: 33 C9                                 xor cx,cx
[1109]    1ABF: 33 C0                                 xor ax,ax
[1110]    1AC1: B9 04 00                              mov cx,4
[1111]        :                                       
[1112]    1AC4:                                       cpy_f2l:
[1113]    1AC4: 8A 84 68 05                           mov al,f+si
[1114]    1AC8: 88 84 D2 04                           mov l+si,al
[1115]    1ACC: 46                                    inc si
[1116]    1ACD: E2 F5                                 loop cpy_f2l
[1117]        :                                       
[1118]    1ACF: FE 0E 58 05                           dec l_index
[1119]    1AD3: 61                                    popa
[1120]    1AD4: C3                                    ret
[1121]        :                                       endp dec_l
[1122]        :                                       
[1123]        :                                       
[1124]        :                                       
[1125]        :                                       ;the macro do xor for to multibytes arrays
[1126]        :                                       ;it gets 2 vars, and return the xored data to the 1st var
[1127]        :                                       ;also it gets no of bytes in each array
[1128]        :                                       ;add para to add certain parameter otherwise keep it zero
[1129]        :                                       macro xor_multibytes var1,var2,bytes_no,addpara1,addpara2
[1130]        :                                       pusha
[1131]        :                                       LOCAL again
[1132]        :                                       xor si,si
[1133]        :                                       xor ax,ax
[1134]        :                                       xor dx,dx
[1135]        :                                       xor cx,cx
[1136]        :                                       xor di,di
[1137]        :                                       mov al,addpara1
[1138]        :                                       mov di,ax
[1139]        :                                       mov al,addpara2
[1140]        :                                       mov si,ax
[1141]        :                                       xor ax,ax
[1142]        :                                       mov cx,bytes_no
[1143]        :                                       again:
[1144]        :                                       mov al,var1+di
[1145]        :                                       mov dl,var2+si
[1146]        :                                       xor al,dl
[1147]        :                                       mov var1+di,al
[1148]        :                                       inc si
[1149]        :                                       inc di
[1150]        :                                       loop again
[1151]        :                                       popa
[1152]        :                                       endm xor_multibytes
[1153]        :                                       ;the proc generates 8 groups of 6 bits b
[1154]        :                                       ;get:e
[1155]        :                                       ;return:b
[1156]    1AD5:                                       proc generate_8_b
[1157]    1AD5: 60                                    pusha
[1158]    1AD6: 33 F6                                 xor si,si
[1159]    1AD8: 33 C9                                 xor cx,cx
[1160]    1ADA: C6 06 51 03 00                        mov temp_byte,0h
[1161]        :                                       ;zero b
[1162]    1ADF: B9 08 00                              mov cx,8
[1163]    1AE2:                                       agn6:
[1164]    1AE2: C6 84 5A 05 00                        mov b+si,0h
[1165]    1AE7: 46                                    inc si
[1166]    1AE8: E2 F8                                 loop agn6
[1167]        :                                       
[1168]        :                                       ;taking first 6 bits from e and put them
[1169]        :                                       ;into first cell of b
[1170]    1AEA: 33 F6                                 xor si,si
[1171]    1AEC: 33 FF                                 xor di,di
[1172]    1AEE: 33 C0                                 xor ax,ax
[1173]    1AF0: 33 DB                                 xor bx,bx
[1174]    1AF2: 33 C9                                 xor cx,cx
[1175]        :                                       ;building 4 chunks of 6 bits
[1176]        :                                       ;doing this twice
[1177]    1AF4: B9 02 00                              mov cx,2
[1178]    1AF7:                                       agn7:
[1179]        :                                       
[1180]    1AF7: 8A 84 52 05                           mov al,e+si
[1181]    1AFB: 24 FC                                 and al,11111100b
[1182]    1AFD: 88 85 5A 05                           mov b+di,al
[1183]    1B01: 47                                    inc di
[1184]        :                                       
[1185]        :                                       
[1186]    1B02: 8A 84 52 05                           mov al,e+si
[1187]    1B06: 24 03                                 and al,00000011b
[1188]    1B08: D0 E0 D0 E0 D0 E0 D0 E0 D0 E0 D0 E0   shl al,6
                                                    
[1189]    1B14: 46                                    inc si
[1190]    1B15: 8A 9C 52 05                           mov bl,e+si
[1191]    1B19: 80 E3 F0                              and bl,11110000b
[1192]    1B1C: D0 EB D0 EB                           shr bl,2
[1193]    1B20: 0A D8                                 or bl,al
[1194]    1B22: 88 9D 5A 05                           mov b+di,bl
[1195]    1B26: 47                                    inc di
[1196]        :                                       
[1197]    1B27: 8A 9C 52 05                           mov bl,e+si
[1198]    1B2B: 80 E3 0F                              and bl,00001111b
[1199]    1B2E: D0 E3 D0 E3 D0 E3 D0 E3               shl bl,4
[1200]    1B36: 46                                    inc si
[1201]    1B37: 8A 84 52 05                           mov al,e+si
[1202]    1B3B: 24 C0                                 and al,11000000b
[1203]    1B3D: D0 E8 D0 E8 D0 E8 D0 E8               shr al,4
[1204]    1B45: 0A D8                                 or bl,al
[1205]    1B47: 88 9D 5A 05                           mov b+di,bl
[1206]    1B4B: 47                                    inc di
[1207]        :                                       
[1208]    1B4C: 8A 9C 52 05                           mov bl,e+si
[1209]    1B50: 80 E3 3F                              and bl,00111111b
[1210]    1B53: D0 E3 D0 E3                           shl bl,2
[1211]    1B57: 46                                    inc si
[1212]    1B58: 88 9D 5A 05                           mov b+di,bl
[1213]    1B5C: 47                                    inc di
[1214]    1B5D: E2 98                                 loop agn7
[1215]    1B5F: 61                                    popa
[1216]    1B60: C3                                    ret
[1217]        :                                       endp generate_8_b
[1218]        :                                       ;the proc replaces b with s-box data
[1219]        :                                       ;get:b
[1220]        :                                       ;return:s
[1221]    1B61:                                       proc access_s_boxes
[1222]    1B61: 60                                    pusha
[1223]    1B62: 33 C0                                 xor ax,ax
[1224]    1B64: 33 F6                                 xor si,si
[1225]    1B66: 33 C9                                 xor cx,cx
[1226]    1B68: B9 08 00                              mov cx,8
[1227]        :                                       
[1228]    1B6B:                                       agn_box:
[1229]        :                                       ;find s box row
[1230]    1B6B: 8A A4 5A 05                           mov ah,b+si
[1231]    1B6F: 80 E4 04                              and ah,00000100b
[1232]    1B72: D0 EC D0 EC                           shr ah,2
[1233]    1B76: 8A C4                                 mov al,ah
[1234]    1B78: 8A A4 5A 05                           mov ah,b+si
[1235]    1B7C: 80 E4 80                              and ah,10000000b
[1236]    1B7F: D0 EC D0 EC D0 EC D0 EC D0 EC D0 EC   shr ah,6
                                                    
[1237]    1B8B: 0A C4                                 or al,ah
[1238]    1B8D: A2 62 05                              mov s_row,al
[1239]        :                                       
[1240]        :                                       ;find s box column
[1241]    1B90: 33 C0                                 xor ax,ax
[1242]    1B92: 8A 84 5A 05                           mov al,b+si
[1243]    1B96: 24 78                                 and al,01111000b
[1244]    1B98: D0 E8 D0 E8 D0 E8                     shr al,3
[1245]    1B9E: A2 63 05                              mov s_column,al
[1246]        :                                       
[1247]        :                                       ;access to s box
[1248]    1BA1: 33 FF                                 xor di,di
[1249]    1BA3: 33 C0                                 xor ax,ax
[1250]    1BA5: 33 DB                                 xor bx,bx
[1251]    1BA7: A0 62 05                              mov al,s_row
[1252]    1BAA: B3 10                                 mov bl,16
[1253]    1BAC: F6 E3                                 mul bl
[1254]    1BAE: 02 06 63 05                           add al,s_column
[1255]    1BB2: 8B F8                                 mov di,ax
[1256]        :                                       
[1257]        :                                       
[1258]    1BB4: 33 DB                                 xor bx,bx
[1259]        :                                       ;s1
[1260]    1BB6: 83 FE 00                              cmp si,0
[1261]    1BB9: 75 06                                 jnz box2
[1262]    1BBB: 8A 9D E8 00                           mov bl,s1+di
[1263]    1BBF: EB 4B                                 jmp end_box
[1264]        :                                       
[1265]        :                                       ;s2
[1266]    1BC1:                                       box2:
[1267]    1BC1: 83 FE 01                              cmp si,1
[1268]    1BC4: 75 06                                 jnz box3
[1269]    1BC6: 8A 9D 28 01                           mov bl,s2+di
[1270]    1BCA: EB 40                                 jmp end_box
[1271]        :                                       
[1272]        :                                       ;s3
[1273]    1BCC:                                       box3:
[1274]    1BCC: 83 FE 02                              cmp si,2
[1275]    1BCF: 75 06                                 jnz box4
[1276]    1BD1: 8A 9D 68 01                           mov bl,s3+di
[1277]    1BD5: EB 35                                 jmp end_box
[1278]        :                                       
[1279]        :                                       ;s4
[1280]    1BD7:                                       box4:
[1281]    1BD7: 83 FE 03                              cmp si,3
[1282]    1BDA: 75 06                                 jnz box5
[1283]    1BDC: 8A 9D A8 01                           mov bl,s4+di
[1284]    1BE0: EB 2A                                 jmp end_box
[1285]        :                                       
[1286]        :                                       ;s5
[1287]    1BE2:                                       box5:
[1288]    1BE2: 83 FE 04                              cmp si,4
[1289]    1BE5: 75 06                                 jnz box6
[1290]    1BE7: 8A 9D E8 01                           mov bl,s5+di
[1291]    1BEB: EB 1F                                 jmp end_box
[1292]        :                                       
[1293]        :                                       ;s6
[1294]    1BED:                                       box6:
[1295]    1BED: 83 FE 05                              cmp si,5
[1296]    1BF0: 75 06                                 jnz box7
[1297]    1BF2: 8A 9D 28 02                           mov bl,s6+di
[1298]    1BF6: EB 14                                 jmp end_box
[1299]        :                                       
[1300]        :                                       ;s7
[1301]    1BF8:                                       box7:
[1302]    1BF8: 83 FE 06                              cmp si,6
[1303]    1BFB: 75 06                                 jnz box8
[1304]    1BFD: 8A 9D 68 02                           mov bl,s7+di
[1305]    1C01: EB 09                                 jmp end_box
[1306]        :                                       
[1307]        :                                       ;s8
[1308]    1C03:                                       box8:
[1309]    1C03: 83 FE 07                              cmp si,7
[1310]    1C06: 75 04                                 jnz end_box
[1311]    1C08: 8A 9D A8 02                           mov bl,s8+di
[1312]        :                                       
[1313]    1C0C:                                       end_box:
[1314]        :                                       
[1315]    1C0C: 88 9C 64 05                           mov s+si,bl
[1316]        :                                       
[1317]    1C10: 46                                    inc si
[1318]    1C11: 49 E3 03 E9 54 FF                     loop agn_box
[1319]        :                                       
[1320]    1C17: 33 C0                                 xor ax,ax
[1321]    1C19: 33 F6                                 xor si,si
[1322]    1C1B: 33 FF                                 xor di,di
[1323]    1C1D: 33 C9                                 xor cx,cx
[1324]    1C1F: B9 04 00                              mov cx,4
[1325]    1C22:                                       agn_arr:
[1326]    1C22: 8A 84 64 05                           mov al,s+si
[1327]    1C26: D0 E0 D0 E0 D0 E0 D0 E0               shl al,4
[1328]    1C2E: 46                                    inc si
[1329]    1C2F: 8A A4 64 05                           mov ah,s+si
[1330]    1C33: 0A C4                                 or al,ah
[1331]    1C35: 46                                    inc si
[1332]    1C36: 88 85 64 05                           mov s+di,al
[1333]    1C3A: 47                                    inc di
[1334]    1C3B: E2 E5                                 loop agn_arr
[1335]        :                                       
[1336]    1C3D: 61                                    popa
[1337]    1C3E: C3                                    ret
[1338]        :                                       endp access_s_boxes
[1339]        :                                       ;the proc arranges and permutate f
[1340]        :                                       ;get:s
[1341]        :                                       ;return:f
[1342]    1C3F:                                       proc arrange_f
[1343]    1C3F: 60                                    pusha
[1344]    1C40: 33 C0                                 xor ax,ax
[1345]    1C42: 33 F6                                 xor si,si
[1346]    1C44: 33 C9                                 xor cx,cx
[1347]        :                                       
[1348]    1C46: B9 04 00                              mov cx,4
[1349]    1C49: 33 F6                                 xor si,si
[1350]    1C4B:                                       agnf:
[1351]    1C4B: 60 33 C0 33 DB 33 C9 33 D2 C7 06 53   permute_key p,si,s,0
                03 00 00 C6 06 51 03 00 C6 06 52 03 
                00 B8 08 00 8B D6 F7 E2 05 E8 02 A3 
                53 03 33 C0 33 D2 B9 08 00 33 DB 33 
                C0 8B 1E 53 03 8A 07 33 DB BA 08 00 
                F6 F2 80 FC 00 75 04 FE C8 B4 08 A2 
                4F 03 88 26 50 03 BB 64 05 33 C0 B0 
                00 03 D8 33 C0 A0 4F 03 03 D8 8A 17 
                80 3E 50 03 01 75 06 80 E2 80 E9 8A 
                00 80 3E 50 03 02 75 07 80 E2 40 D0 
                E2 EB 7C 80 3E 50 03 03 75 09 80 E2 
                20 D0 E2 D0 E2 EB 6C 80 3E 50 03 04 
                75 0B 80 E2 10 D0 E2 D0 E2 D0 E2 EB 
                5A 80 3E 50 03 05 75 0D 80 E2 08 D0 
                E2 D0 E2 D0 E2 D0 E2 EB 46 80 3E 50 
                03 06 75 0F 80 E2 04 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 30 80 3E 50 03 07 
                75 11 80 E2 02 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 18 80 3E 50 03 08 
                75 11 80 E2 01 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 D0 E2 90 80 3E 52 03 
                00 75 0D 80 FA 80 75 05 80 36 51 03 
                80 E9 83 00 80 3E 52 03 01 75 0C 80 
                FA 80 75 05 80 36 51 03 40 EB 70 80 
                3E 52 03 02 75 0C 80 FA 80 75 05 80 
                36 51 03 20 EB 5D 80 3E 52 03 03 75 
                0C 80 FA 80 75 05 80 36 51 03 10 EB 
                4A 80 3E 52 03 04 75 0C 80 FA 80 75 
                05 80 36 51 03 08 EB 37 80 3E 52 03 
                05 75 0C 80 FA 80 75 05 80 36 51 03 
                04 EB 24 80 3E 52 03 06 75 0C 80 FA 
                80 75 05 80 36 51 03 02 EB 11 80 3E 
                52 03 07 75 0A 80 FA 80 75 05 80 36 
                51 03 01 90 FF 06 53 03 FE 06 52 03 
                49 E3 03 E9 8F FE 61                
[1352]    1DEA: A0 51 03                              mov al,temp_byte
[1353]    1DED: 88 84 68 05                           mov f+si,al
[1354]    1DF1: 46                                    inc si
[1355]    1DF2: 49 E3 03 E9 53 FE                     loop agnf
[1356]        :                                       
[1357]        :                                       
[1358]    1DF8: 61                                    popa
[1359]    1DF9: C3                                    ret
[1360]        :                                       endp arrange_f
[1361]        :                                       ;the proc joins encrypted rl
[1362]        :                                       ;get:r,l
[1363]        :                                       ;return:rl
[1364]    1DFA:                                       proc join_rl
[1365]    1DFA: 60                                    pusha
[1366]    1DFB: 33 C0                                 xor ax,ax
[1367]    1DFD: 33 F6                                 xor si,si
[1368]    1DFF: 33 C9                                 xor cx,cx
[1369]        :                                       
[1370]    1E01: B9 04 00                              mov cx,4
[1371]    1E04:                                       cpy_r:
[1372]    1E04: 8A 84 12 05                           mov al,r+si
[1373]    1E08: 88 84 78 05                           mov rl+si,al
[1374]    1E0C: 46                                    inc si
[1375]    1E0D: E2 F5                                 loop cpy_r
[1376]        :                                       
[1377]    1E0F: 33 C0                                 xor ax,ax
[1378]    1E11: 33 FF                                 xor di,di
[1379]    1E13: B9 04 00                              mov cx,4
[1380]    1E16:                                       cpy_l:
[1381]    1E16: 8A 85 D2 04                           mov al,l+di
[1382]    1E1A: 88 84 78 05                           mov rl+si,al
[1383]    1E1E: 46                                    inc si
[1384]    1E1F: 47                                    inc di
[1385]    1E20: E2 F4                                 loop cpy_l
[1386]        :                                       
[1387]    1E22: 33 FF                                 xor di,di
[1388]    1E24: 33 C9                                 xor cx,cx
[1389]    1E26: 33 C0                                 xor ax,ax
[1390]    1E28: B9 08 00                              mov cx,8
[1391]    1E2B:                                       agn_pr:
[1392]    1E2B: 60 33 C0 33 DB 33 C9 33 D2 C7 06 53   permute_key pc_minus,di,rl,0
                03 00 00 C6 06 51 03 00 C6 06 52 03 
                00 B8 08 00 8B D7 F7 E2 05 08 03 A3 
                53 03 33 C0 33 D2 B9 08 00 33 DB 33 
                C0 8B 1E 53 03 8A 07 33 DB BA 08 00 
                F6 F2 80 FC 00 75 04 FE C8 B4 08 A2 
                4F 03 88 26 50 03 BB 78 05 33 C0 B0 
                00 03 D8 33 C0 A0 4F 03 03 D8 8A 17 
                80 3E 50 03 01 75 06 80 E2 80 E9 8A 
                00 80 3E 50 03 02 75 07 80 E2 40 D0 
                E2 EB 7C 80 3E 50 03 03 75 09 80 E2 
                20 D0 E2 D0 E2 EB 6C 80 3E 50 03 04 
                75 0B 80 E2 10 D0 E2 D0 E2 D0 E2 EB 
                5A 80 3E 50 03 05 75 0D 80 E2 08 D0 
                E2 D0 E2 D0 E2 D0 E2 EB 46 80 3E 50 
                03 06 75 0F 80 E2 04 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 30 80 3E 50 03 07 
                75 11 80 E2 02 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 18 80 3E 50 03 08 
                75 11 80 E2 01 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 D0 E2 90 80 3E 52 03 
                00 75 0D 80 FA 80 75 05 80 36 51 03 
                80 E9 83 00 80 3E 52 03 01 75 0C 80 
                FA 80 75 05 80 36 51 03 40 EB 70 80 
                3E 52 03 02 75 0C 80 FA 80 75 05 80 
                36 51 03 20 EB 5D 80 3E 52 03 03 75 
                0C 80 FA 80 75 05 80 36 51 03 10 EB 
                4A 80 3E 52 03 04 75 0C 80 FA 80 75 
                05 80 36 51 03 08 EB 37 80 3E 52 03 
                05 75 0C 80 FA 80 75 05 80 36 51 03 
                04 EB 24 80 3E 52 03 06 75 0C 80 FA 
                80 75 05 80 36 51 03 02 EB 11 80 3E 
                52 03 07 75 0A 80 FA 80 75 05 80 36 
                51 03 01 90 FF 06 53 03 FE 06 52 03 
                49 E3 03 E9 8F FE 61                
[1393]    1FCA: A0 51 03                              mov al,temp_byte
[1394]    1FCD: 88 85 8C 05                           mov enc_msg+di,al
[1395]    1FD1: 47                                    inc di
[1396]    1FD2: 49 E3 03 E9 53 FE                     loop agn_pr
[1397]    1FD8: 61                                    popa
[1398]    1FD9: C3                                    ret
[1399]        :                                       endp join_rl
[1400]        :                                       ;the proc joins decrypted lr
[1401]        :                                       ;get:l,r
[1402]        :                                       ;return:lr
[1403]    1FDA:                                       proc  join_dec_lr
[1404]    1FDA: 60                                    pusha
[1405]    1FDB: 33 FF                                 xor di,di
[1406]    1FDD: 33 C9                                 xor cx,cx
[1407]    1FDF: 33 C0                                 xor ax,ax
[1408]    1FE1: 33 F6                                 xor si,si
[1409]    1FE3: B9 04 00                              mov cx,4
[1410]    1FE6:                                       copy_l:
[1411]    1FE6: 8A 84 D2 04                           mov al,l+si
[1412]    1FEA: 88 05                                 mov m+di,al
[1413]    1FEC: 46                                    inc si
[1414]    1FED: 47                                    inc di
[1415]    1FEE: E2 F6                                 loop copy_l
[1416]        :                                       
[1417]        :                                       
[1418]    1FF0: 33 C9                                 xor cx,cx
[1419]    1FF2: 33 C0                                 xor ax,ax
[1420]    1FF4: 33 F6                                 xor si,si
[1421]    1FF6: B9 04 00                              mov cx,4
[1422]    1FF9:                                       copy_r:
[1423]    1FF9: 8A 84 12 05                           mov al,r+si
[1424]    1FFD: 88 05                                 mov m+di,al
[1425]    1FFF: 46                                    inc si
[1426]    2000: 47                                    inc di
[1427]    2001: E2 F6                                 loop copy_r
[1428]    2003: 61                                    popa
[1429]    2004: C3                                    ret
[1430]        :                                       endp  join_dec_lr
[1431]        :                                       ;the proc divide the encrypted msg
[1432]        :                                       ;get:
[1433]        :                                       ;return: r,l
[1434]    2005:                                       proc divide_enc_msg
[1435]    2005: 60                                    pusha
[1436]    2006: 33 C9                                 xor cx,cx
[1437]    2008: 33 F6                                 xor si,si
[1438]    200A: 33 FF                                 xor di,di
[1439]    200C: 33 C0                                 xor ax,ax
[1440]    200E: B9 04 00                              mov cx,4
[1441]    2011:                                       copy_right:
[1442]    2011: 8A 05                                 mov al,m+di
[1443]    2013: 88 84 12 05                           mov r+si,al
[1444]    2017: 46                                    inc si
[1445]    2018: 47                                    inc di
[1446]    2019: E2 F6                                 loop copy_right
[1447]    201B: 33 F6                                 xor si,si
[1448]    201D: B9 04 00                              mov cx,4
[1449]    2020:                                       copy_left:
[1450]    2020: 8A 05                                 mov al,m+di
[1451]    2022: 88 84 D2 04                           mov l+si,al
[1452]    2026: 46                                    inc si
[1453]    2027: 47                                    inc di
[1454]    2028: E2 F6                                 loop copy_left
[1455]    202A: 61                                    popa
[1456]    202B: C3                                    ret
[1457]        :                                       endp divide_enc_msg
[1458]        :                                       
[1459]    202C:                                       start:
[1460]        :                                       ; set segment registers:
[1461]    202C: B8 00 00                              mov ax, data
[1462]    202F: 8E D8                                 mov ds, ax
[1463]    2031: 8E C0                                 mov es, ax
[1464]        :                                       ;WELCOME:
[1465]        :                                       ;reset screen
[1466]    2033: E8 9A E9                              call cln_scr
[1467]    2036: 60 B4 02 B7 00 33 D2 CD 10 61         set_cur 0,0
[1468]    2040: 60 B4 09 BA 63 08 CD 21 61            print_msg welcome_msg
[1469]        :                                       ;new line
[1470]    2049: B2 0A                                 mov dl,10
[1471]    204B: B4 02                                 mov ah,2
[1472]    204D: CD 21                                 int 21h
[1473]        :                                       ;print help
[1474]    204F: 60 B4 09 BA 71 07 CD 21 61            print_msg help_msg
[1475]        :                                       ;new line
[1476]    2058: B2 0A                                 mov dl,10
[1477]    205A: B4 02                                 mov ah,2
[1478]    205C: CD 21                                 int 21h
[1479]    205E:                                       ask_again:
[1480]        :                                       ;zeromsg
[1481]    205E: 33 F6                                 xor si,si
[1482]    2060: B9 08 00                              mov cx,8
[1483]    2063:                                       xoragn:
[1484]    2063: C6 04 00                              mov m+si,0
[1485]    2066: C6 44 08 00                           mov ekey+si,0
[1486]    206A: 46                                    inc si
[1487]    206B: E2 F6                                 loop xoragn
[1488]        :                                       ;zeromsg ascii
[1489]    206D: 33 F6                                 xor si,si
[1490]    206F: B9 10 00                              mov cx,16
[1491]    2072:                                       xoragn2:
[1492]    2072: C6 84 94 05 00                        mov m_ascii+si,0
[1493]    2077: C6 84 BA 05 00                        mov enc_msg_ascii+si,0
[1494]    207C: C6 84 CB 05 00                        mov dec_msg_ascii+si,0
[1495]    2081: C6 84 8C 05 00                        mov enc_msg+si,0
[1496]    2086: C6 06 84 05 00                        mov dec_msg,0
[1497]    208B: 46                                    inc si
[1498]    208C: E2 E4                                 loop xoragn2
[1499]    208E: BE 02 00                              mov si,2
[1500]    2091: B9 10 00                              mov cx,16
[1501]    2094:                                       xorkeyascii:
[1502]    2094: C6 84 A7 05 00                        mov ekey_ascii+si,0
[1503]    2099: 46                                    inc si
[1504]    209A: E2 F8                                 loop xorkeyascii
[1505]        :                                       
[1506]        :                                       
[1507]    209C: 60 B4 09 BA 62 07 CD 21 61            print_msg ask_command
[1508]        :                                       ;new line
[1509]    20A5: B2 0A                                 mov dl,10
[1510]    20A7: B4 02                                 mov ah,2
[1511]    20A9: CD 21                                 int 21h
[1512]        :                                       ;get input
[1513]    20AB: B4 01                                 mov ah,1
[1514]    20AD: CD 21                                 int 21h
[1515]        :                                       ;reset screen
[1516]    20AF: E8 1E E9                              call cln_scr
[1517]    20B2: 60 B4 02 B7 00 33 D2 CD 10 61         set_cur 0,0
[1518]        :                                       ;check input
[1519]    20BC: 3C 65                                 cmp al,'e'
[1520]    20BE: 74 15                                 jz encrypt
[1521]    20C0: 3C 45                                 cmp al,'E'
[1522]    20C2: 74 11                                 jz encrypt
[1523]    20C4: 3C 64                                 cmp al,"d"
[1524]    20C6: 75 03 E9 A7 00                        jz decrypt
[1525]    20CB: 3C 44                                 cmp al,"D"
[1526]    20CD: 75 03 E9 A0 00                        jz decrypt
[1527]    20D2: E9 9C 04                              jmp error2
[1528]        :                                       
[1529]        :                                       
[1530]        :                                       
[1531]    20D5:                                       encrypt:
[1532]        :                                       ;ENCRYPTION
[1533]        :                                       
[1534]        :                                       ;INPUT
[1535]    20D5: E8 09 E9                              call get_msgnkey
[1536]        :                                       
[1537]        :                                       ;CALCULATIONS
[1538]    20D8: E8 C8 EB                              call arrange_k_plus
[1539]    20DB: E8 89 EE                              call join_16_cd
[1540]    20DE: E8 55 EF                              call generate_k
[1541]    20E1: E8 28 F1                              call arrange_ip
[1542]        :                                       ;zero indexes
[1543]    20E4: C6 06 59 05 00                        mov r_index,0
[1544]    20E9: C6 06 58 05 00                        mov l_index,0
[1545]    20EE: 33 C9                                 xor cx,cx
[1546]    20F0: B9 10 00                              mov cx,16
[1547]    20F3:                                       crt_l_r:
[1548]    20F3: E8 F7 F2                              call create_l
[1549]    20F6: E8 5B F3                              call create_r
[1550]    20F9: E2 F8                                 loop crt_l_r
[1551]        :                                       
[1552]    20FB: E8 FC FC                              call join_rl
[1553]        :                                       
[1554]        :                                       ;OUTPUT
[1555]    20FE: 60 33 F6 33 C0 33 C9 33 FF B9 08 00   hex2str enc_msg,enc_msg_ascii
                8A 84 8C 05 24 F0 D0 E8 D0 E8 D0 E8 
                D0 E8 3C 0A 78 09 04 37 88 85 BA 05 
                47 EB 07 04 30 88 85 BA 05 47 8A 84 
                8C 05 24 0F 3C 0A 78 09 04 37 88 85 
                BA 05 47 EB 07 04 30 88 85 BA 05 47 
                46 E2 C1 61                         
[1556]        :                                       ;reset screen
[1557]    214A: E8 83 E8                              call cln_scr
[1558]    214D: 60 B4 02 B7 00 33 D2 CD 10 61         set_cur 0,0
[1559]    2157: 60 B4 09 BA 24 07 CD 21 61            print_msg show_enc
[1560]    2160: 60 B4 09 BA BA 05 CD 21 61            print_msg enc_msg_ascii
[1561]        :                                       
[1562]        :                                       ;new line
[1563]    2169: B2 0A                                 mov dl,10
[1564]    216B: B4 02                                 mov ah,2
[1565]    216D: CD 21                                 int 21h
[1566]    216F: E9 EC FE                              jmp ask_again
[1567]        :                                       
[1568]        :                                       
[1569]    2172:                                       decrypt:
[1570]        :                                       ;DECRYPTION
[1571]        :                                       ;INPUT
[1572]    2172: E8 CC E9                              call get_encnkey
[1573]        :                                       
[1574]        :                                       ;CALCULATIONS
[1575]        :                                       
[1576]    2175: B9 08 00                              mov cx,8
[1577]    2178: 33 F6                                 xor si,si
[1578]    217A:                                       prmt:
[1579]    217A: 60 33 C0 33 DB 33 C9 33 D2 C7 06 53   permute_key ip_tbl,si,enc_msg,0,0
                03 00 00 C6 06 51 03 00 C6 06 52 03 
                00 B8 08 00 8B D6 F7 E2 05 78 00 A3 
                53 03 33 C0 33 D2 B9 08 00 33 DB 33 
                C0 8B 1E 53 03 8A 07 33 DB BA 08 00 
                F6 F2 80 FC 00 75 04 FE C8 B4 08 A2 
                4F 03 88 26 50 03 BB 8C 05 33 C0 B0 
                00 03 D8 33 C0 A0 4F 03 03 D8 8A 17 
                80 3E 50 03 01 75 06 80 E2 80 E9 8A 
                00 80 3E 50 03 02 75 07 80 E2 40 D0 
                E2 EB 7C 80 3E 50 03 03 75 09 80 E2 
                20 D0 E2 D0 E2 EB 6C 80 3E 50 03 04 
                75 0B 80 E2 10 D0 E2 D0 E2 D0 E2 EB 
                5A 80 3E 50 03 05 75 0D 80 E2 08 D0 
                E2 D0 E2 D0 E2 D0 E2 EB 46 80 3E 50 
                03 06 75 0F 80 E2 04 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 30 80 3E 50 03 07 
                75 11 80 E2 02 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 18 80 3E 50 03 08 
                75 11 80 E2 01 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 D0 E2 90 80 3E 52 03 
                00 75 0D 80 FA 80 75 05 80 36 51 03 
                80 E9 83 00 80 3E 52 03 01 75 0C 80 
                FA 80 75 05 80 36 51 03 40 EB 70 80 
                3E 52 03 02 75 0C 80 FA 80 75 05 80 
                36 51 03 20 EB 5D 80 3E 52 03 03 75 
                0C 80 FA 80 75 05 80 36 51 03 10 EB 
                4A 80 3E 52 03 04 75 0C 80 FA 80 75 
                05 80 36 51 03 08 EB 37 80 3E 52 03 
                05 75 0C 80 FA 80 75 05 80 36 51 03 
                04 EB 24 80 3E 52 03 06 75 0C 80 FA 
                80 75 05 80 36 51 03 02 EB 11 80 3E 
                52 03 07 75 0A 80 FA 80 75 05 80 36 
                51 03 01 90 FF 06 53 03 FE 06 52 03 
                49 E3 03 E9 8F FE 61                
[1580]    2319: A0 51 03                              mov al,temp_byte
[1581]    231C: 88 04                                 mov m+si,al
[1582]    231E: 46                                    inc si
[1583]    231F: 49 E3 03 E9 55 FE                     loop prmt
[1584]    2325: E8 DD FC                              call divide_enc_msg
[1585]    2328: E8 78 E9                              call arrange_k_plus
[1586]    232B: E8 39 EC                              call join_16_cd
[1587]    232E: E8 05 ED                              call generate_k
[1588]        :                                       
[1589]    2331: 33 C9                                 xor cx,cx
[1590]    2333: B9 10 00                              mov cx,16
[1591]    2336: C6 06 59 05 0F                        mov r_index,0fh
[1592]    233B: C6 06 58 05 0F                        mov l_index,0fh
[1593]    2340:                                       dec_l_r:
[1594]    2340: E8 F4 F0                              call dec_r
[1595]    2343: E8 4B F5                              call dec_l
[1596]    2346: E2 F8                                 loop dec_l_r
[1597]        :                                       
[1598]    2348: E8 8F FC                              call join_dec_lr
[1599]    234B: B9 08 00                              mov cx,8
[1600]    234E: 33 F6                                 xor si,si
[1601]    2350:                                       prmt2:
[1602]    2350: 60 33 C0 33 DB 33 C9 33 D2 C7 06 53   permute_key pc_minus,si,m,0,0
                03 00 00 C6 06 51 03 00 C6 06 52 03 
                00 B8 08 00 8B D6 F7 E2 05 08 03 A3 
                53 03 33 C0 33 D2 B9 08 00 33 DB 33 
                C0 8B 1E 53 03 8A 07 33 DB BA 08 00 
                F6 F2 80 FC 00 75 04 FE C8 B4 08 A2 
                4F 03 88 26 50 03 BB 00 00 33 C0 B0 
                00 03 D8 33 C0 A0 4F 03 03 D8 8A 17 
                80 3E 50 03 01 75 06 80 E2 80 E9 8A 
                00 80 3E 50 03 02 75 07 80 E2 40 D0 
                E2 EB 7C 80 3E 50 03 03 75 09 80 E2 
                20 D0 E2 D0 E2 EB 6C 80 3E 50 03 04 
                75 0B 80 E2 10 D0 E2 D0 E2 D0 E2 EB 
                5A 80 3E 50 03 05 75 0D 80 E2 08 D0 
                E2 D0 E2 D0 E2 D0 E2 EB 46 80 3E 50 
                03 06 75 0F 80 E2 04 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 30 80 3E 50 03 07 
                75 11 80 E2 02 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 EB 18 80 3E 50 03 08 
                75 11 80 E2 01 D0 E2 D0 E2 D0 E2 D0 
                E2 D0 E2 D0 E2 D0 E2 90 80 3E 52 03 
                00 75 0D 80 FA 80 75 05 80 36 51 03 
                80 E9 83 00 80 3E 52 03 01 75 0C 80 
                FA 80 75 05 80 36 51 03 40 EB 70 80 
                3E 52 03 02 75 0C 80 FA 80 75 05 80 
                36 51 03 20 EB 5D 80 3E 52 03 03 75 
                0C 80 FA 80 75 05 80 36 51 03 10 EB 
                4A 80 3E 52 03 04 75 0C 80 FA 80 75 
                05 80 36 51 03 08 EB 37 80 3E 52 03 
                05 75 0C 80 FA 80 75 05 80 36 51 03 
                04 EB 24 80 3E 52 03 06 75 0C 80 FA 
                80 75 05 80 36 51 03 02 EB 11 80 3E 
                52 03 07 75 0A 80 FA 80 75 05 80 36 
                51 03 01 90 FF 06 53 03 FE 06 52 03 
                49 E3 03 E9 8F FE 61                
[1603]    24EF: A0 51 03                              mov al,temp_byte
[1604]    24F2: 88 84 84 05                           mov dec_msg+si,al
[1605]    24F6: 46                                    inc si
[1606]    24F7: 49 E3 03 E9 53 FE                     loop prmt2
[1607]        :                                       
[1608]        :                                       ;OUTPUT
[1609]    24FD: 60 33 F6 33 C0 33 C9 33 FF B9 08 00   hex2str dec_msg,dec_msg_ascii
                8A 84 84 05 24 F0 D0 E8 D0 E8 D0 E8 
                D0 E8 3C 0A 78 09 04 37 88 85 CB 05 
                47 EB 07 04 30 88 85 CB 05 47 8A 84 
                84 05 24 0F 3C 0A 78 09 04 37 88 85 
                CB 05 47 EB 07 04 30 88 85 CB 05 47 
                46 E2 C1 61                         
[1610]        :                                       ;reset screen
[1611]    2549: E8 84 E4                              call cln_scr
[1612]    254C: 60 B4 02 B7 00 33 D2 CD 10 61         set_cur 0,0
[1613]    2556: 60 B4 09 BA 43 07 CD 21 61            print_msg show_dec
[1614]    255F: 60 B4 09 BA CB 05 CD 21 61            print_msg dec_msg_ascii
[1615]        :                                       
[1616]        :                                       ;new line
[1617]    2568: B2 0A                                 mov dl,10
[1618]    256A: B4 02                                 mov ah,2
[1619]    256C: CD 21                                 int 21h
[1620]    256E: E9 ED FA                              jmp ask_again
[1621]        :                                       
[1622]    2571:                                       error2:
[1623]        :                                       ;reset screen
[1624]    2571: E8 5C E4                              call cln_scr
[1625]    2574: 60 B4 02 B7 00 33 D2 CD 10 61         set_cur 0,0
[1626]    257E: 60 B4 09 BA DC 05 CD 21 61            print_msg error_msg
[1627]        :                                       ; wait for any key....
[1628]    2587: B4 01                                 mov ah, 1
[1629]    2589: CD 21                                 int 21h
[1630]        :                                       ;new line
[1631]    258B: B2 0A                                 mov dl,10
[1632]    258D: B4 02                                 mov ah,2
[1633]    258F: CD 21                                 int 21h
[1634]    2591: E9 CA FA                              jmp ask_again
[1635]        :                                       
[1636]        :                                       
[1637]        :                                       
[1638]        :                                       
[1639]        :                                       
[1640]        :                                       
[1641]        :                                       
[1642]    2594: B8 00 4C                              mov ax, 4c00h ; exit to operating system.
[1643]    2597: CD 21                                 int 21h
[1644]        :                                       
[1645]        :                                       
[1646]        :                                       
[1647]        :                                       end start ; set entry point and stop the assembler.
[1648]        :                                       
[1649]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 99      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 14      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 8D      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 77      -   check sum (l.byte)
0013: F3      -   check sum (h.byte)
0014: 5C      -   IP - instruction pointer (l.byte)
0015: 16      -   IP - instruction pointer (h.byte)
0016: 9D      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 5D      -   relocation table - offset inside segment (l.byte)
001F: 16      -   relocation table - offset inside segment (h.byte)
0020: 9D      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
